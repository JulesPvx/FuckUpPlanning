<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/fr/uptrash/fuckupplanning/ui/calendar/CalendarScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/fr/uptrash/fuckupplanning/ui/calendar/CalendarScreen.kt" />
              <option name="originalContent" value="package fr.uptrash.fuckupplanning.ui.calendar&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import androidx.compose.foundation.layout.fillMaxHeight&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.CalendarViewDay&#10;import androidx.compose.material.icons.filled.CalendarViewMonth&#10;import androidx.compose.material.icons.filled.CalendarViewWeek&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.FilterList&#10;import androidx.compose.material.icons.filled.Group&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Refresh&#10;import androidx.compose.material.icons.filled.School&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.ModalBottomSheet&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SegmentedButton&#10;import androidx.compose.material3.SegmentedButtonDefaults&#10;import androidx.compose.material3.SingleChoiceSegmentedButtonRow&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.material3.rememberModalBottomSheetState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import fr.uptrash.fuckupplanning.data.model.Event&#10;import kotlinx.datetime.DateTimeUnit&#10;import kotlinx.datetime.DayOfWeek&#10;import kotlinx.datetime.LocalDate&#10;import kotlinx.datetime.LocalDateTime&#10;import kotlinx.datetime.isoDayNumber&#10;import kotlinx.datetime.minus&#10;import kotlinx.datetime.number&#10;import kotlinx.datetime.plus&#10;import kotlinx.datetime.toLocalDateTime&#10;import kotlin.time.Clock&#10;import kotlin.time.ExperimentalTime&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CalendarScreen(&#10;    modifier: Modifier = Modifier,&#10;    viewModel: CalendarViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;&#10;    Scaffold(&#10;        modifier = modifier,&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;PlanItBetter&quot;, fontWeight = FontWeight.Bold) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;                ),&#10;                actions = {&#10;                    IconButton(onClick = { viewModel.showSettings() }) {&#10;                        Icon(Icons.Default.Settings, contentDescription = &quot;Settings&quot;)&#10;                    }&#10;                    IconButton(onClick = { viewModel.loadEvents() }) {&#10;                        Icon(Icons.Default.Refresh, contentDescription = &quot;Refresh&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(top = paddingValues.calculateTopPadding())&#10;        ) {&#10;            CalendarHeader(&#10;                viewMode = uiState.viewMode,&#10;                selectedDate = uiState.selectedDate,&#10;                onViewModeChange = { viewModel.switchViewMode(it) },&#10;                onPreviousClick = { viewModel.navigatePrevious() },&#10;                onNextClick = { viewModel.navigateNext() }&#10;            )&#10;&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(48.dp),&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                }&#10;&#10;                uiState.error != null -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                            Text(&#10;                                text = &quot;Error: ${uiState.error}&quot;,&#10;                                color = MaterialTheme.colorScheme.error,&#10;                                style = MaterialTheme.typography.bodyLarge&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Button(&#10;                                onClick = { viewModel.loadEvents() },&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = MaterialTheme.colorScheme.error&#10;                                )&#10;                            ) {&#10;                                Text(&quot;Retry&quot;)&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    when (uiState.viewMode) {&#10;                        CalendarViewMode.DAY -&gt; DayView(&#10;                            selectedDate = uiState.selectedDate,&#10;                            events = uiState.events,&#10;                            onEventClick = { viewModel.selectEvent(it) },&#10;                            paddingValues = paddingValues&#10;                        )&#10;&#10;                        CalendarViewMode.WEEK -&gt; WeekView(&#10;                            selectedDate = uiState.selectedDate,&#10;                            events = uiState.events,&#10;                            onEventClick = { viewModel.selectEvent(it) },&#10;                            paddingValues = paddingValues&#10;                        )&#10;&#10;                        CalendarViewMode.MONTH -&gt; MonthView(&#10;                            selectedDate = uiState.selectedDate,&#10;                            events = uiState.events,&#10;                            onDateClick = { viewModel.selectDayForCourseList(it) },&#10;                            onEventClick = { viewModel.selectEvent(it) },&#10;                            paddingValues = paddingValues&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Event Detail Modal&#10;        uiState.selectedEvent?.let { event -&gt;&#10;            ModalBottomSheet(&#10;                onDismissRequest = { viewModel.dismissEventDetail() },&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                contentWindowInsets = { WindowInsets(0.dp, 0.dp, 0.dp, 0.dp) },&#10;                sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = false)&#10;            ) {&#10;                EventDetailView(&#10;                    event = event,&#10;                    onDismiss = { viewModel.dismissEventDetail() }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Day Course List Modal&#10;        uiState.selectedDayForCourseList?.let { selectedDate -&gt;&#10;            val dayEvents = uiState.events.filter { it.startDateTime.date == selectedDate }&#10;                .sortedBy { it.startDateTime }&#10;            ModalBottomSheet(&#10;                onDismissRequest = { viewModel.dismissDayCourseList() },&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                contentWindowInsets = { WindowInsets(0.dp, 0.dp, 0.dp, 0.dp) },&#10;                sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = false)&#10;            ) {&#10;                DayCourseListView(&#10;                    date = selectedDate,&#10;                    events = dayEvents,&#10;                    onEventClick = { event -&gt;&#10;                        viewModel.dismissDayCourseList()&#10;                        viewModel.selectEvent(event)&#10;                    },&#10;                    onDismiss = { viewModel.dismissDayCourseList() }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Settings Modal&#10;        if (uiState.showSettings) {&#10;            ModalBottomSheet(&#10;                onDismissRequest = { viewModel.dismissSettings() },&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                contentWindowInsets = { WindowInsets(0.dp, 0.dp, 0.dp, 0.dp) },&#10;                sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = false)&#10;            ) {&#10;                SettingsView(&#10;                    selectedTPGroup = uiState.selectedTPGroup,&#10;                    onTPGroupChange = { viewModel.selectTPGroup(it) },&#10;                    onDismiss = { viewModel.dismissSettings() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CalendarHeader(&#10;    viewMode: CalendarViewMode,&#10;    selectedDate: LocalDate,&#10;    onViewModeChange: (CalendarViewMode) -&gt; Unit,&#10;    onPreviousClick: () -&gt; Unit,&#10;    onNextClick: () -&gt; Unit&#10;) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        color = MaterialTheme.colorScheme.surface&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // View mode selector&#10;            SingleChoiceSegmentedButtonRow(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                SegmentedButton(&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 0, count = 3),&#10;                    onClick = { onViewModeChange(CalendarViewMode.DAY) },&#10;                    selected = viewMode == CalendarViewMode.DAY,&#10;                    icon = {&#10;                        Icon(&#10;                            Icons.Default.CalendarViewDay,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                ) {&#10;                    Text(&quot;Day&quot;)&#10;                }&#10;                SegmentedButton(&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 1, count = 3),&#10;                    onClick = { onViewModeChange(CalendarViewMode.WEEK) },&#10;                    selected = viewMode == CalendarViewMode.WEEK,&#10;                    icon = {&#10;                        Icon(&#10;                            Icons.Default.CalendarViewWeek,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                ) {&#10;                    Text(&quot;Week&quot;)&#10;                }&#10;                SegmentedButton(&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 2, count = 3),&#10;                    onClick = { onViewModeChange(CalendarViewMode.MONTH) },&#10;                    selected = viewMode == CalendarViewMode.MONTH,&#10;                    icon = {&#10;                        Icon(&#10;                            Icons.Default.CalendarViewMonth,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                ) {&#10;                    Text(&quot;Month&quot;)&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Date navigation&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = onPreviousClick) {&#10;                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Previous&quot;)&#10;                }&#10;&#10;                Text(&#10;                    text = formatDateRange(selectedDate, viewMode),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Medium,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                IconButton(onClick = onNextClick) {&#10;                    Icon(Icons.AutoMirrored.Filled.ArrowForward, contentDescription = &quot;Next&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DayView(&#10;    selectedDate: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    onEventClick: (Event) -&gt; Unit,&#10;    paddingValues: PaddingValues&#10;) {&#10;    val dayEvents = events.filter { it.startDateTime.date == selectedDate }&#10;        .sortedBy { it.startDateTime }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(&#10;            start = 16.dp,&#10;            end = 16.dp,&#10;            top = 16.dp,&#10;            bottom = paddingValues.calculateBottomPadding() + 16.dp&#10;        ),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        if (dayEvents.isEmpty()) {&#10;            item {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = &quot;No events for this day&quot;,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            // Add time summary card&#10;            item {&#10;                DayTimeSummary(events = dayEvents)&#10;            }&#10;&#10;            items(dayEvents) { event -&gt;&#10;                EnhancedEventCard(&#10;                    event = event,&#10;                    onClick = { onEventClick(event) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DayTimeSummary(modifier: Modifier = Modifier, events: List&lt;Event&gt;) {&#10;    if (events.isEmpty()) return&#10;&#10;    val sortedEvents = events.sortedBy { it.startDateTime }&#10;    val firstEvent = sortedEvents.first()&#10;    val lastEvent = sortedEvents.last()&#10;&#10;    // Calculate total pause time&#10;    var totalPauseMinutes = 0&#10;    for (i in 0 until sortedEvents.size - 1) {&#10;        val currentEventEnd = sortedEvents[i].endDateTime&#10;        val nextEventStart = sortedEvents[i + 1].startDateTime&#10;&#10;        val currentEndMinutes = currentEventEnd.hour * 60 + currentEventEnd.minute&#10;        val nextStartMinutes = nextEventStart.hour * 60 + nextEventStart.minute&#10;&#10;        if (nextStartMinutes &gt; currentEndMinutes) {&#10;            totalPauseMinutes += nextStartMinutes - currentEndMinutes&#10;        }&#10;    }&#10;&#10;    // Calculate total working time&#10;    val totalWorkingMinutes = events.sumOf { event -&gt;&#10;        val startMinutes = event.startDateTime.hour * 60 + event.startDateTime.minute&#10;        val endMinutes = event.endDateTime.hour * 60 + event.endDateTime.minute&#10;        endMinutes - startMinutes&#10;    }&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.7f)&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.DateRange,&#10;                    contentDescription = &quot;Day Summary&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Text(&#10;                    text = &quot;Day Summary&quot;,&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;            }&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                // Start Time&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Start&quot;,&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = formatTime(firstEvent.startDateTime),&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;&#10;                // End Time&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;End&quot;,&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = formatTime(lastEvent.endDateTime),&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;&#10;                // Total Events&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Events&quot;,&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = events.size.toString(),&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Time breakdown row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                // Working Time&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Work Time&quot;,&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = formatDuration(totalWorkingMinutes),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Pause Time&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = &quot;Pause Time&quot;,&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = if (totalPauseMinutes &gt; 0) formatDuration(totalPauseMinutes) else &quot;None&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = if (totalPauseMinutes &gt; 0) MaterialTheme.colorScheme.tertiary else MaterialTheme.colorScheme.onPrimaryContainer.copy(&#10;                            alpha = 0.5f&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WeekView(&#10;    selectedDate: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    onEventClick: (Event) -&gt; Unit,&#10;    paddingValues: PaddingValues&#10;) {&#10;    val startOfWeek = selectedDate.minus(selectedDate.dayOfWeek.isoDayNumber - 1, DateTimeUnit.DAY)&#10;    // Only show Monday to Friday (5 days instead of 7)&#10;    val weekDays = (0..4).map { startOfWeek.plus(it, DateTimeUnit.DAY) }&#10;&#10;    val weekEvents = events.filter { event -&gt;&#10;        weekDays.any { day -&gt; event.startDateTime.date == day }&#10;    }.groupBy { it.startDateTime.date }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(&#10;            start = 16.dp,&#10;            end = 16.dp,&#10;            top = 16.dp,&#10;            bottom = paddingValues.calculateBottomPadding() + 16.dp&#10;        ),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(weekDays) { day -&gt;&#10;            WeekDayCard(&#10;                date = day,&#10;                events = weekEvents[day] ?: emptyList(),&#10;                isSelected = day == selectedDate,&#10;                onEventClick = onEventClick&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalTime::class)&#10;@Composable&#10;fun MonthView(&#10;    selectedDate: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    onDateClick: (LocalDate) -&gt; Unit,&#10;    onEventClick: (Event) -&gt; Unit,&#10;    paddingValues: PaddingValues&#10;) {&#10;    val firstDayOfMonth = LocalDate(selectedDate.year, selectedDate.month, 1)&#10;&#10;    // Calculate the first day to show (start of week containing first day of month)&#10;    val startDay =&#10;        firstDayOfMonth.minus(firstDayOfMonth.dayOfWeek.isoDayNumber - 1, DateTimeUnit.DAY)&#10;&#10;    // Calculate all days to show, but only include weekdays (Monday-Friday)&#10;    val allDays = (0..41).map { startDay.plus(it, DateTimeUnit.DAY) }&#10;    val daysToShow = allDays.filter { date -&gt;&#10;        date.dayOfWeek != DayOfWeek.SATURDAY &amp;&amp; date.dayOfWeek != DayOfWeek.SUNDAY&#10;    }&#10;&#10;    val monthEvents = events.filter { event -&gt;&#10;        daysToShow.any { day -&gt; event.startDateTime.date == day }&#10;    }.groupBy { it.startDateTime.date }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Enhanced month header with only weekdays&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer&#10;            ),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                listOf(&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;).forEach { dayName -&gt;&#10;                    Text(&#10;                        text = dayName,&#10;                        modifier = Modifier.weight(1f),&#10;                        textAlign = TextAlign.Center,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Calendar grid with only weekdays (5 columns)&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            verticalArrangement = Arrangement.spacedBy(6.dp),&#10;            contentPadding = PaddingValues(bottom = paddingValues.calculateBottomPadding() + 16.dp)&#10;        ) {&#10;            // Group weekdays into weeks (5 days per row)&#10;            val weekdayChunks = daysToShow.chunked(5)&#10;            items(weekdayChunks) { week -&gt;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(6.dp)&#10;                ) {&#10;                    week.forEach { date -&gt;&#10;                        EnhancedMonthDayCell(&#10;                            date = date,&#10;                            isCurrentMonth = date.month == selectedDate.month,&#10;                            isSelected = date == selectedDate,&#10;                            isToday = date == Clock.System.now()&#10;                                .toLocalDateTime(kotlinx.datetime.TimeZone.currentSystemDefault()).date,&#10;                            events = monthEvents[date] ?: emptyList(),&#10;                            onDateClick = onDateClick,&#10;                            onEventClick = onEventClick,&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                    }&#10;                    // Fill remaining space if week has less than 5 days&#10;                    repeat(5 - week.size) {&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EnhancedMonthDayCell(&#10;    date: LocalDate,&#10;    isCurrentMonth: Boolean,&#10;    isSelected: Boolean,&#10;    isToday: Boolean,&#10;    events: List&lt;Event&gt;,&#10;    onDateClick: (LocalDate) -&gt; Unit,&#10;    onEventClick: (Event) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val backgroundColor = when {&#10;        isSelected -&gt; MaterialTheme.colorScheme.primary&#10;        !isCurrentMonth -&gt; MaterialTheme.colorScheme.surfaceVariant&#10;        isToday -&gt; MaterialTheme.colorScheme.secondaryContainer&#10;        else -&gt; MaterialTheme.colorScheme.surface&#10;    }&#10;&#10;    val contentColor = when {&#10;        isSelected -&gt; MaterialTheme.colorScheme.onPrimary&#10;        !isCurrentMonth -&gt; MaterialTheme.colorScheme.onSurfaceVariant&#10;        isToday -&gt; MaterialTheme.colorScheme.onSecondaryContainer&#10;        else -&gt; MaterialTheme.colorScheme.onSurface&#10;    }&#10;&#10;    // Calculate time information for the day&#10;    val sortedEvents = events.sortedBy { it.startDateTime }&#10;    val firstEvent = sortedEvents.firstOrNull()&#10;    val lastEvent = sortedEvents.lastOrNull()&#10;&#10;    // Calculate total working hours for the day&#10;    val totalWorkingMinutes = events.sumOf { event -&gt;&#10;        val startMinutes = event.startDateTime.hour * 60 + event.startDateTime.minute&#10;        val endMinutes = event.endDateTime.hour * 60 + event.endDateTime.minute&#10;        endMinutes - startMinutes&#10;    }&#10;    val totalHours = totalWorkingMinutes / 60f&#10;&#10;    // Calculate outline properties based on total hours&#10;    // Max expected hours per day is 8, so we scale from 0 to 8 hours&#10;    val normalizedHours = (totalHours / 8f).coerceIn(0f, 1f)&#10;    val outlineOpacity = (normalizedHours * 0.8f + 0.2f).coerceIn(0.2f, 1f) // Min 0.2, max 1.0&#10;    val outlineWidth = (normalizedHours * 2f + 0.2f).dp // Min 0.2dp, max 2.2dp&#10;&#10;    val outlineColor = when {&#10;        isSelected -&gt; MaterialTheme.colorScheme.onPrimary&#10;        !isCurrentMonth -&gt; MaterialTheme.colorScheme.outline.copy(alpha = outlineOpacity * 0.5f)&#10;        totalHours &gt; 0 -&gt; MaterialTheme.colorScheme.primary.copy(alpha = outlineOpacity)&#10;        else -&gt; MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)&#10;    }&#10;&#10;    // Calculate total pause time&#10;    var totalPauseMinutes = 0&#10;    if (sortedEvents.size &gt; 1) {&#10;        for (i in 0 until sortedEvents.size - 1) {&#10;            val currentEventEnd = sortedEvents[i].endDateTime&#10;            val nextEventStart = sortedEvents[i + 1].startDateTime&#10;&#10;            val currentEndMinutes = currentEventEnd.hour * 60 + currentEventEnd.minute&#10;            val nextStartMinutes = nextEventStart.hour * 60 + nextEventStart.minute&#10;&#10;            if (nextStartMinutes &gt; currentEndMinutes) {&#10;                totalPauseMinutes += nextStartMinutes - currentEndMinutes&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .fillMaxHeight()&#10;            .clip(RoundedCornerShape(8.dp))&#10;            .background(backgroundColor)&#10;            .border(&#10;                width = if (events.isNotEmpty()) outlineWidth else 1.dp,&#10;                color = outlineColor,&#10;                shape = RoundedCornerShape(8.dp)&#10;            )&#10;            .clickable { onDateClick(date) }&#10;            .padding(8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = date.day.toString(),&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = contentColor&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        if (events.isNotEmpty()) {&#10;            // Show time information instead of course names&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(2.dp)&#10;            ) {&#10;                // Start time&#10;                firstEvent?.let { event -&gt;&#10;                    Text(&#10;                        text = formatTime(event.startDateTime),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = contentColor&#10;                    )&#10;                }&#10;&#10;                // End time&#10;                lastEvent?.let { event -&gt;&#10;                    Text(&#10;                        text = formatTime(event.endDateTime),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = contentColor&#10;                    )&#10;                }&#10;&#10;                // Pause time (only if there are multiple events and pauses)&#10;                if (totalPauseMinutes &gt; 0) {&#10;                    Text(&#10;                        text = &quot;P:${formatDuration(totalPauseMinutes)}&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = contentColor.copy(alpha = 0.8f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WeekDayCard(&#10;    date: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    isSelected: Boolean,&#10;    onEventClick: (Event) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isSelected)&#10;                MaterialTheme.colorScheme.primaryContainer&#10;            else&#10;                MaterialTheme.colorScheme.surfaceVariant&#10;        ),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = getDayOfWeekDisplayName(date.dayOfWeek, full = false),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = if (isSelected)&#10;                            MaterialTheme.colorScheme.onPrimaryContainer&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = date.day.toString(),&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (isSelected)&#10;                            MaterialTheme.colorScheme.onPrimaryContainer&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;&#10;                if (events.isNotEmpty()) {&#10;                    Surface(&#10;                        shape = CircleShape,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(24.dp)&#10;                    ) {&#10;                        Box(contentAlignment = Alignment.Center) {&#10;                            Text(&#10;                                text = events.size.toString(),&#10;                                color = MaterialTheme.colorScheme.onPrimary,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            if (events.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                events.take(3).forEach { event -&gt;&#10;                    CompactEventItem(event = event, onClick = { onEventClick(event) })&#10;                    if (event != events.last() &amp;&amp; events.indexOf(event) &lt; 2) {&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                    }&#10;                }&#10;                if (events.size &gt; 3) {&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;+${events.size - 3} more&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CompactEventItem(event: Event, onClick: () -&gt; Unit) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(8.dp)&#10;                .background(&#10;                    MaterialTheme.colorScheme.primary,&#10;                    CircleShape&#10;                )&#10;        )&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = event.summary,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                fontWeight = FontWeight.Medium,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            Text(&#10;                text = &quot;${formatTime(event.startDateTime)} - ${formatTime(event.endDateTime)}&quot;,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EnhancedEventCard(event: Event, onClick: () -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;            .border(&#10;                width = 1.dp,&#10;                color = MaterialTheme.colorScheme.outline,&#10;                shape = RoundedCornerShape(20.dp)&#10;            ),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface,&#10;        ),&#10;        shape = RoundedCornerShape(20.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            // Header with course type badge and title&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = event.summary,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;&#10;                if (!event.courseType.isNullOrBlank()) {&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Surface(&#10;                        color = when (event.courseType) {&#10;                            &quot;CM&quot; -&gt; MaterialTheme.colorScheme.primaryContainer&#10;                            &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.secondaryContainer&#10;                            &quot;TD&quot; -&gt; MaterialTheme.colorScheme.tertiaryContainer&#10;                            else -&gt; MaterialTheme.colorScheme.primaryContainer&#10;                        },&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = event.courseType,&#10;                            style = MaterialTheme.typography.labelLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = when (event.courseType) {&#10;                                &quot;CM&quot; -&gt; MaterialTheme.colorScheme.onPrimaryContainer&#10;                                &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.onSecondaryContainer&#10;                                &quot;TD&quot; -&gt; MaterialTheme.colorScheme.onTertiaryContainer&#10;                                else -&gt; MaterialTheme.colorScheme.onPrimaryContainer&#10;                            },&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Time information with improved styling&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                    shape = CircleShape,&#10;                    modifier = Modifier.size(40.dp)&#10;                ) {&#10;                    Box(contentAlignment = Alignment.Center) {&#10;                        Icon(&#10;                            Icons.Default.DateRange,&#10;                            contentDescription = &quot;Time&quot;,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(20.dp)&#10;                        )&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Column {&#10;                    Text(&#10;                        text = &quot;${formatTime(event.startDateTime)} - ${formatTime(event.endDateTime)}&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    // Calculate duration in minutes&#10;                    val startMinutes = event.startDateTime.hour * 60 + event.startDateTime.minute&#10;                    val endMinutes = event.endDateTime.hour * 60 + event.endDateTime.minute&#10;                    val durationMinutes = endMinutes - startMinutes&#10;                    val hours = durationMinutes / 60&#10;                    val minutes = durationMinutes % 60&#10;                    val durationText = when {&#10;                        hours &gt; 0 &amp;&amp; minutes &gt; 0 -&gt; &quot;${hours}h ${minutes}min&quot;&#10;                        hours &gt; 0 -&gt; &quot;${hours}h&quot;&#10;                        else -&gt; &quot;${minutes}min&quot;&#10;                    }&#10;                    Text(&#10;                        text = durationText,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Location information&#10;            if (!event.location.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Surface(&#10;                        color = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.3f),&#10;                        shape = CircleShape,&#10;                        modifier = Modifier.size(40.dp)&#10;                    ) {&#10;                        Box(contentAlignment = Alignment.Center) {&#10;                            Icon(&#10;                                Icons.Default.LocationOn,&#10;                                contentDescription = &quot;Location&quot;,&#10;                                tint = MaterialTheme.colorScheme.secondary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    Text(&#10;                        text = event.location,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Instructor information&#10;            if (!event.instructor.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Surface(&#10;                        color = MaterialTheme.colorScheme.tertiaryContainer.copy(alpha = 0.3f),&#10;                        shape = CircleShape,&#10;                        modifier = Modifier.size(40.dp)&#10;                    ) {&#10;                        Box(contentAlignment = Alignment.Center) {&#10;                            Icon(&#10;                                Icons.Default.Person,&#10;                                contentDescription = &quot;Instructor&quot;,&#10;                                tint = MaterialTheme.colorScheme.tertiary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    Text(&#10;                        text = event.instructor,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Groups information&#10;            if (event.groups.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Surface(&#10;                        color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                        shape = CircleShape,&#10;                        modifier = Modifier.size(40.dp)&#10;                    ) {&#10;                        Box(contentAlignment = Alignment.Center) {&#10;                            Icon(&#10;                                Icons.Default.Group,&#10;                                contentDescription = &quot;Groups&quot;,&#10;                                tint = MaterialTheme.colorScheme.primary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    Column {&#10;                        Text(&#10;                            text = &quot;Groups&quot;,&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(6.dp)&#10;                        ) {&#10;                            event.groups.take(4).forEach { group -&gt;&#10;                                Surface(&#10;                                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                                    shape = RoundedCornerShape(8.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = group,&#10;                                        style = MaterialTheme.typography.labelSmall,&#10;                                        fontWeight = FontWeight.Medium,&#10;                                        color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                                        modifier = Modifier.padding(&#10;                                            horizontal = 8.dp,&#10;                                            vertical = 4.dp&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            if (event.groups.size &gt; 4) {&#10;                                Surface(&#10;                                    color = MaterialTheme.colorScheme.outline.copy(alpha = 0.2f),&#10;                                    shape = RoundedCornerShape(8.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;+${event.groups.size - 4}&quot;,&#10;                                        style = MaterialTheme.typography.labelSmall,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                        modifier = Modifier.padding(&#10;                                            horizontal = 8.dp,&#10;                                            vertical = 4.dp&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Notes preview&#10;            if (!event.notes.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Surface(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    color = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Column(modifier = Modifier.padding(12.dp)) {&#10;                        Text(&#10;                            text = &quot;Notes&quot;,&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            fontWeight = FontWeight.SemiBold,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Text(&#10;                            text = event.notes,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            maxLines = 2,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            lineHeight = MaterialTheme.typography.bodyMedium.lineHeight.times(1.2f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Tap to view more indicator&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = &quot;Tap for details&quot;,&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Icon(&#10;                    Icons.AutoMirrored.Filled.ArrowForward,&#10;                    contentDescription = &quot;View details&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EventDetailView(&#10;    event: Event,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(0.dp), // Remove padding to use full width&#10;        verticalArrangement = Arrangement.spacedBy(0.dp)&#10;    ) {&#10;        // Header with gradient background&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                ),&#10;                shape = RoundedCornerShape(&#10;                    topStart = 28.dp,&#10;                    topEnd = 28.dp,&#10;                    bottomStart = 0.dp,&#10;                    bottomEnd = 0.dp&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    // Event title and course type&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.Top&#10;                    ) {&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = event.summary,&#10;                                style = MaterialTheme.typography.headlineLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                                lineHeight = MaterialTheme.typography.headlineLarge.lineHeight.times(&#10;                                    1.1f&#10;                                )&#10;                            )&#10;                        }&#10;&#10;                        if (!event.courseType.isNullOrBlank()) {&#10;                            Spacer(modifier = Modifier.width(16.dp))&#10;                            Surface(&#10;                                color = when (event.courseType) {&#10;                                    &quot;CM&quot; -&gt; MaterialTheme.colorScheme.primary&#10;                                    &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.secondary&#10;                                    &quot;TD&quot; -&gt; MaterialTheme.colorScheme.tertiary&#10;                                    else -&gt; MaterialTheme.colorScheme.primary&#10;                                },&#10;                                shape = RoundedCornerShape(16.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = event.courseType,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = when (event.courseType) {&#10;                                        &quot;CM&quot; -&gt; MaterialTheme.colorScheme.onPrimary&#10;                                        &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.onSecondary&#10;                                        &quot;TD&quot; -&gt; MaterialTheme.colorScheme.onTertiary&#10;                                        else -&gt; MaterialTheme.colorScheme.onPrimary&#10;                                    },&#10;                                    modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Main content area&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface&#10;                ),&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(28.dp)&#10;                ) {&#10;                    // Time &amp; Date Section&#10;                    EnhancedDetailSection(&#10;                        title = &quot;Schedule&quot;,&#10;                        icon = Icons.Default.DateRange,&#10;                        iconColor = MaterialTheme.colorScheme.primary&#10;                    ) {&#10;                        Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Column {&#10;                                    Text(&#10;                                        text = &quot;Date&quot;,&#10;                                        style = MaterialTheme.typography.labelLarge,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                    Text(&#10;                                        text = formatDate(event.startDateTime.date),&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = MaterialTheme.colorScheme.onSurface&#10;                                    )&#10;                                }&#10;&#10;                                Surface(&#10;                                    color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                                    shape = RoundedCornerShape(12.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = getDayOfWeekDisplayName(&#10;                                            event.startDateTime.date.dayOfWeek,&#10;                                            full = true&#10;                                        ),&#10;                                        style = MaterialTheme.typography.labelLarge,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = MaterialTheme.colorScheme.primary,&#10;                                        modifier = Modifier.padding(&#10;                                            horizontal = 12.dp,&#10;                                            vertical = 6.dp&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                TimeDisplayCard(&#10;                                    label = &quot;Start&quot;,&#10;                                    time = formatTime(event.startDateTime),&#10;                                    modifier = Modifier.weight(1f)&#10;                                )&#10;&#10;                                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                                TimeDisplayCard(&#10;                                    label = &quot;End&quot;,&#10;                                    time = formatTime(event.endDateTime),&#10;                                    modifier = Modifier.weight(1f)&#10;                                )&#10;                            }&#10;&#10;                            // Duration&#10;                            val startMinutes =&#10;                                event.startDateTime.hour * 60 + event.startDateTime.minute&#10;                            val endMinutes = event.endDateTime.hour * 60 + event.endDateTime.minute&#10;                            val durationMinutes = endMinutes - startMinutes&#10;&#10;                            Surface(&#10;                                color = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.5f),&#10;                                shape = RoundedCornerShape(16.dp),&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.padding(16.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically,&#10;                                    horizontalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Icon(&#10;                                        Icons.Default.DateRange,&#10;                                        contentDescription = null,&#10;                                        tint = MaterialTheme.colorScheme.secondary,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&#10;                                        text = &quot;Duration: ${formatDuration(durationMinutes)}&quot;,&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = MaterialTheme.colorScheme.secondary&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Location Section&#10;                    if (!event.location.isNullOrBlank()) {&#10;                        EnhancedDetailSection(&#10;                            title = &quot;Location&quot;,&#10;                            icon = Icons.Default.LocationOn,&#10;                            iconColor = MaterialTheme.colorScheme.secondary&#10;                        ) {&#10;                            Surface(&#10;                                color = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f),&#10;                                shape = RoundedCornerShape(16.dp),&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Text(&#10;                                    text = event.location,&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    color = MaterialTheme.colorScheme.onSurface,&#10;                                    modifier = Modifier.padding(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Instructor Section&#10;                    if (!event.instructor.isNullOrBlank()) {&#10;                        EnhancedDetailSection(&#10;                            title = &quot;Instructor&quot;,&#10;                            icon = Icons.Default.Person,&#10;                            iconColor = MaterialTheme.colorScheme.tertiary&#10;                        ) {&#10;                            Surface(&#10;                                color = MaterialTheme.colorScheme.tertiaryContainer.copy(alpha = 0.3f),&#10;                                shape = RoundedCornerShape(16.dp),&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Text(&#10;                                    text = event.instructor,&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    color = MaterialTheme.colorScheme.onSurface,&#10;                                    modifier = Modifier.padding(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Groups Section&#10;                    if (event.groups.isNotEmpty()) {&#10;                        EnhancedDetailSection(&#10;                            title = &quot;Groups&quot;,&#10;                            icon = Icons.Default.Group,&#10;                            iconColor = MaterialTheme.colorScheme.primary&#10;                        ) {&#10;                            LazyRow(&#10;                                horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                                contentPadding = PaddingValues(horizontal = 4.dp)&#10;                            ) {&#10;                                items(event.groups) { group -&gt;&#10;                                    Surface(&#10;                                        color = MaterialTheme.colorScheme.primaryContainer,&#10;                                        shape = RoundedCornerShape(20.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = group,&#10;                                            style = MaterialTheme.typography.titleMedium,&#10;                                            fontWeight = FontWeight.SemiBold,&#10;                                            color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                                            modifier = Modifier.padding(&#10;                                                horizontal = 16.dp,&#10;                                                vertical = 8.dp&#10;                                            )&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Notes Section&#10;                    if (!event.notes.isNullOrBlank()) {&#10;                        EnhancedDetailSection(&#10;                            title = &quot;Notes&quot;,&#10;                            icon = Icons.Default.School,&#10;                            iconColor = MaterialTheme.colorScheme.secondary&#10;                        ) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(&#10;                                        alpha = 0.5f&#10;                                    )&#10;                                ),&#10;                                shape = RoundedCornerShape(16.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = event.notes,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    color = MaterialTheme.colorScheme.onSurface,&#10;                                    modifier = Modifier.padding(20.dp),&#10;                                    lineHeight = MaterialTheme.typography.bodyLarge.lineHeight.times(&#10;                                        1.4f&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Additional Information Section&#10;                    if (!event.lastUpdated.isNullOrBlank()) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.outline.copy(alpha = 0.1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(16.dp),&#10;                                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Last Updated&quot;,&#10;                                    style = MaterialTheme.typography.labelMedium,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Text(&#10;                                    text = event.lastUpdated,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Bottom padding&#10;                    Spacer(modifier = Modifier.height(32.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EnhancedDetailSection(&#10;    title: String,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    iconColor: androidx.compose.ui.graphics.Color,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    Column(&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Surface(&#10;                color = iconColor.copy(alpha = 0.15f),&#10;                shape = CircleShape,&#10;                modifier = Modifier.size(40.dp)&#10;            ) {&#10;                Box(contentAlignment = Alignment.Center) {&#10;                    Icon(&#10;                        imageVector = icon,&#10;                        contentDescription = null,&#10;                        tint = iconColor,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;        content()&#10;    }&#10;}&#10;&#10;@Composable&#10;fun TimeDisplayCard(&#10;    label: String,&#10;    time: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Surface(&#10;        color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.5f),&#10;        shape = RoundedCornerShape(16.dp),&#10;        modifier = modifier&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.labelLarge,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Text(&#10;                text = time,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DayCourseListView(&#10;    date: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    onEventClick: (Event) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(0.dp),&#10;        verticalArrangement = Arrangement.spacedBy(0.dp)&#10;    ) {&#10;        // Header&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                ),&#10;                shape = RoundedCornerShape(&#10;                    topStart = 28.dp,&#10;                    topEnd = 28.dp,&#10;                    bottomStart = 0.dp,&#10;                    bottomEnd = 0.dp&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column {&#10;                            Text(&#10;                                text = formatDate(date),&#10;                                style = MaterialTheme.typography.headlineLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                            )&#10;                            Text(&#10;                                text = getDayOfWeekDisplayName(date.dayOfWeek, full = true),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)&#10;                            )&#10;                        }&#10;&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(48.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Text(&#10;                                    text = events.size.toString(),&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.onPrimary&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Time Summary Section&#10;        if (events.isNotEmpty()) {&#10;            item {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surface&#10;                    ),&#10;                    shape = RoundedCornerShape(0.dp)&#10;                ) {&#10;                    DayTimeSummary(&#10;                        modifier = Modifier.padding(&#10;                            start = 16.dp,&#10;                            end = 16.dp,&#10;                            top = 16.dp&#10;                        ), events = events&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Course List&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface&#10;                ),&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    if (events.isEmpty()) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(32.dp),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Column(&#10;                                horizontalAlignment = Alignment.CenterHorizontally,&#10;                                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    Icons.Default.DateRange,&#10;                                    contentDescription = &quot;No events&quot;,&#10;                                    tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                    modifier = Modifier.size(48.dp)&#10;                                )&#10;                                Text(&#10;                                    text = &quot;No courses for this day&quot;,&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                    textAlign = TextAlign.Center&#10;                                )&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Surface(&#10;                                color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                                shape = CircleShape,&#10;                                modifier = Modifier.size(40.dp)&#10;                            ) {&#10;                                Box(contentAlignment = Alignment.Center) {&#10;                                    Icon(&#10;                                        Icons.Default.School,&#10;                                        contentDescription = &quot;Courses&quot;,&#10;                                        tint = MaterialTheme.colorScheme.primary,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                            Text(&#10;                                text = &quot;Courses&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;&#10;                        events.forEach { event -&gt;&#10;                            DayCourseItem(&#10;                                event = event,&#10;                                onClick = { onEventClick(event) }&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Bottom padding&#10;                    Spacer(modifier = Modifier.height(32.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DayCourseItem(&#10;    event: Event,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceTint.copy(alpha = 0.1f)&#10;        ),&#10;        shape = RoundedCornerShape(20.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(24.dp)&#10;        ) {&#10;            // Header section with title and course type badge&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = event.summary,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis,&#10;                        lineHeight = MaterialTheme.typography.headlineSmall.lineHeight.times(1.1f)&#10;                    )&#10;                }&#10;&#10;                if (!event.courseType.isNullOrBlank()) {&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    Surface(&#10;                        color = when (event.courseType) {&#10;                            &quot;CM&quot; -&gt; MaterialTheme.colorScheme.primary&#10;                            &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.secondary&#10;                            &quot;TD&quot; -&gt; MaterialTheme.colorScheme.tertiary&#10;                            else -&gt; MaterialTheme.colorScheme.primary&#10;                        },&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = event.courseType,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = when (event.courseType) {&#10;                                &quot;CM&quot; -&gt; MaterialTheme.colorScheme.onPrimary&#10;                                &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.onSecondary&#10;                                &quot;TD&quot; -&gt; MaterialTheme.colorScheme.onTertiary&#10;                                else -&gt; MaterialTheme.colorScheme.onPrimary&#10;                            },&#10;                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Enhanced time section with visual divider&#10;            Surface(&#10;                color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                shape = RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.padding(20.dp),&#10;                    horizontalArrangement = Arrangement.SpaceEvenly,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Start time with icon&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.DateRange,&#10;                                    contentDescription = &quot;Start time&quot;,&#10;                                    tint = MaterialTheme.colorScheme.primary,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Text(&#10;                            text = &quot;Start&quot;,&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = formatTime(event.startDateTime),&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;&#10;                    // Visual divider&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .width(2.dp)&#10;                            .height(60.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.outline.copy(alpha = 0.3f),&#10;                                RoundedCornerShape(1.dp)&#10;                            )&#10;                    )&#10;&#10;                    // End time with icon&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.secondary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.DateRange,&#10;                                    contentDescription = &quot;End time&quot;,&#10;                                    tint = MaterialTheme.colorScheme.secondary,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Text(&#10;                            text = &quot;End&quot;,&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = formatTime(event.endDateTime),&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;&#10;                    // Visual divider&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .width(2.dp)&#10;                            .height(60.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.outline.copy(alpha = 0.3f),&#10;                                RoundedCornerShape(1.dp)&#10;                            )&#10;                    )&#10;&#10;                    // Duration with icon&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.tertiary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.DateRange,&#10;                                    contentDescription = &quot;Duration&quot;,&#10;                                    tint = MaterialTheme.colorScheme.tertiary,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Text(&#10;                            text = &quot;Duration&quot;,&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        val startMinutes =&#10;                            event.startDateTime.hour * 60 + event.startDateTime.minute&#10;                        val endMinutes = event.endDateTime.hour * 60 + event.endDateTime.minute&#10;                        val durationMinutes = endMinutes - startMinutes&#10;                        Text(&#10;                            text = formatDuration(durationMinutes),&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.tertiary&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Location section with enhanced styling&#10;            if (!event.location.isNullOrBlank()) {&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.5f),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.secondary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(40.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.LocationOn,&#10;                                    contentDescription = &quot;Location&quot;,&#10;                                    tint = MaterialTheme.colorScheme.secondary,&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Column {&#10;                            Text(&#10;                                text = &quot;Location&quot;,&#10;                                style = MaterialTheme.typography.labelMedium,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = event.location,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.SemiBold,&#10;                                color = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Instructor section if available&#10;            if (!event.instructor.isNullOrBlank()) {&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.tertiaryContainer.copy(alpha = 0.3f),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.tertiary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(40.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.Person,&#10;                                    contentDescription = &quot;Instructor&quot;,&#10;                                    tint = MaterialTheme.colorScheme.tertiary,&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Column {&#10;                            Text(&#10;                                text = &quot;Instructor&quot;,&#10;                                style = MaterialTheme.typography.labelMedium,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = event.instructor,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.SemiBold,&#10;                                color = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Enhanced call-to-action with better visual emphasis&#10;            Surface(&#10;                color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                shape = RoundedCornerShape(bottomEnd = 16.dp, bottomStart = 16.dp),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(24.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.School,&#10;                                    contentDescription = &quot;Details&quot;,&#10;                                    tint = MaterialTheme.colorScheme.primary,&#10;                                    modifier = Modifier.size(12.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Text(&#10;                            text = &quot;Tap to view full details&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                    Icon(&#10;                        Icons.AutoMirrored.Filled.ArrowForward,&#10;                        contentDescription = &quot;View details&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Settings View&#10;@Composable&#10;fun SettingsView(&#10;    selectedTPGroup: TPGroup,&#10;    onTPGroupChange: (TPGroup) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(0.dp),&#10;        verticalArrangement = Arrangement.spacedBy(0.dp)&#10;    ) {&#10;        // Header&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                ),&#10;                shape = RoundedCornerShape(&#10;                    topStart = 28.dp,&#10;                    topEnd = 28.dp,&#10;                    bottomStart = 0.dp,&#10;                    bottomEnd = 0.dp&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(48.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.Settings,&#10;                                    contentDescription = &quot;Settings&quot;,&#10;                                    tint = MaterialTheme.colorScheme.primary,&#10;                                    modifier = Modifier.size(24.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Column {&#10;                            Text(&#10;                                text = &quot;Settings&quot;,&#10;                                style = MaterialTheme.typography.headlineLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                            Text(&#10;                                text = &quot;Configure your calendar preferences&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Main content area&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface&#10;                ),&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(24.dp)&#10;                ) {&#10;                    // TP Group Filter Section&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.3f)&#10;                        ),&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(20.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                            ) {&#10;                                Surface(&#10;                                    color = MaterialTheme.colorScheme.secondary.copy(alpha = 0.2f),&#10;                                    shape = CircleShape,&#10;                                    modifier = Modifier.size(40.dp)&#10;                                ) {&#10;                                    Box(contentAlignment = Alignment.Center) {&#10;                                        Icon(&#10;                                            Icons.Default.FilterList,&#10;                                            contentDescription = &quot;Filter&quot;,&#10;                                            tint = MaterialTheme.colorScheme.secondary,&#10;                                            modifier = Modifier.size(20.dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                                Column {&#10;                                    Text(&#10;                                        text = &quot;TP Group Filter&quot;,&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Choose which TP group events to display&quot;,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onSecondaryContainer.copy(&#10;                                            alpha = 0.8f&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // TP Group Selection&#10;                            SingleChoiceSegmentedButtonRow(&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                listOf(&#10;                                    TPGroup.ALL,&#10;                                    TPGroup.TP1,&#10;                                    TPGroup.TP2,&#10;                                    TPGroup.TP3,&#10;                                    TPGroup.TP4&#10;                                ).forEachIndexed { index, tpGroup -&gt;&#10;                                    SegmentedButton(&#10;                                        shape = SegmentedButtonDefaults.itemShape(&#10;                                            index = index,&#10;                                            count = 5&#10;                                        ),&#10;                                        onClick = { onTPGroupChange(tpGroup) },&#10;                                        selected = selectedTPGroup == tpGroup,&#10;                                        colors = SegmentedButtonDefaults.colors(&#10;                                            activeContainerColor = MaterialTheme.colorScheme.secondary,&#10;                                            activeContentColor = MaterialTheme.colorScheme.onSecondary,&#10;                                            inactiveContainerColor = MaterialTheme.colorScheme.surface,&#10;                                            inactiveContentColor = MaterialTheme.colorScheme.onSurface&#10;                                        )&#10;                                    ) {&#10;                                        Text(&#10;                                            text = when (tpGroup) {&#10;                                                TPGroup.ALL -&gt; &quot;All&quot;&#10;                                                TPGroup.TP1 -&gt; &quot;TP1&quot;&#10;                                                TPGroup.TP2 -&gt; &quot;TP2&quot;&#10;                                                TPGroup.TP3 -&gt; &quot;TP3&quot;&#10;                                                TPGroup.TP4 -&gt; &quot;TP4&quot;&#10;                                            },&#10;                                            style = MaterialTheme.typography.labelMedium,&#10;                                            fontWeight = if (selectedTPGroup == tpGroup) FontWeight.Bold else FontWeight.Medium&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            // Current selection info&#10;                            Surface(&#10;                                color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                                shape = RoundedCornerShape(12.dp),&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier.padding(16.dp),&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;Current Filter&quot;,&#10;                                        style = MaterialTheme.typography.labelMedium,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = MaterialTheme.colorScheme.primary&#10;                                    )&#10;                                    when (selectedTPGroup) {&#10;                                        TPGroup.ALL -&gt; {&#10;                                            Text(&#10;                                                text = &quot;Showing all events regardless of TP group&quot;,&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = MaterialTheme.colorScheme.onSurface&#10;                                            )&#10;                                        }&#10;&#10;                                        TPGroup.TP1 -&gt; {&#10;                                            Text(&#10;                                                text = &quot;Showing TP1, TDA, CM courses, and general events&quot;,&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = MaterialTheme.colorScheme.onSurface&#10;                                            )&#10;                                        }&#10;&#10;                                        TPGroup.TP2 -&gt; {&#10;                                            Text(&#10;                                                text = &quot;Showing TP2, TDA, CM courses, and general events&quot;,&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = MaterialTheme.colorScheme.onSurface&#10;                                            )&#10;                                        }&#10;&#10;                                        TPGroup.TP3 -&gt; {&#10;                                            Text(&#10;                                                text = &quot;Showing TP3, TDB, CM courses, and general events&quot;,&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = MaterialTheme.colorScheme.onSurface&#10;                                            )&#10;                                        }&#10;&#10;                                        TPGroup.TP4 -&gt; {&#10;                                            Text(&#10;                                                text = &quot;Showing TP4, TDB, CM courses, and general events&quot;,&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = MaterialTheme.colorScheme.onSurface&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Future settings can be added here&#10;                    Text(&#10;                        text = &quot;More settings will be available in future updates&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    // Bottom padding&#10;                    Spacer(modifier = Modifier.height(32.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper functions&#10;private fun formatDateRange(date: LocalDate, viewMode: CalendarViewMode): String {&#10;    return when (viewMode) {&#10;        CalendarViewMode.DAY -&gt; formatDate(date)&#10;        CalendarViewMode.WEEK -&gt; {&#10;            val startOfWeek = date.minus(date.dayOfWeek.isoDayNumber - 1, DateTimeUnit.DAY)&#10;            val endOfWeek = startOfWeek.plus(6, DateTimeUnit.DAY)&#10;            &quot;${formatDate(startOfWeek)} - ${formatDate(endOfWeek)}&quot;&#10;        }&#10;&#10;        CalendarViewMode.MONTH -&gt; {&#10;            val month = date.month.number.toString().padStart(2, '0')&#10;            val year = date.year&#10;            &quot;$month/$year&quot;&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatDate(date: LocalDate): String {&#10;    return &quot;${date.day.toString().padStart(2, '0')}/&quot; +&#10;            &quot;${date.month.number.toString().padStart(2, '0')}/&quot; +&#10;            &quot;${date.year}&quot;&#10;}&#10;&#10;private fun formatTime(dateTime: LocalDateTime): String {&#10;    return &quot;${dateTime.hour.toString().padStart(2, '0')}:&quot; +&#10;            dateTime.minute.toString().padStart(2, '0')&#10;}&#10;&#10;private fun getDayOfWeekDisplayName(dayOfWeek: DayOfWeek, full: Boolean): String {&#10;    return when (dayOfWeek) {&#10;        DayOfWeek.MONDAY -&gt; if (full) &quot;Monday&quot; else &quot;Mon&quot;&#10;        DayOfWeek.TUESDAY -&gt; if (full) &quot;Tuesday&quot; else &quot;Tue&quot;&#10;        DayOfWeek.WEDNESDAY -&gt; if (full) &quot;Wednesday&quot; else &quot;Wed&quot;&#10;        DayOfWeek.THURSDAY -&gt; if (full) &quot;Thursday&quot; else &quot;Thu&quot;&#10;        DayOfWeek.FRIDAY -&gt; if (full) &quot;Friday&quot; else &quot;Fri&quot;&#10;        DayOfWeek.SATURDAY -&gt; if (full) &quot;Saturday&quot; else &quot;Sat&quot;&#10;        DayOfWeek.SUNDAY -&gt; if (full) &quot;Sunday&quot; else &quot;Sun&quot;&#10;    }&#10;}&#10;&#10;private fun formatDuration(totalMinutes: Int): String {&#10;    val hours = totalMinutes / 60&#10;    val minutes = totalMinutes % 60&#10;    return when {&#10;        hours &gt; 0 &amp;&amp; minutes &gt; 0 -&gt; &quot;${hours}h ${minutes}min&quot;&#10;        hours &gt; 0 -&gt; &quot;${hours}h&quot;&#10;        else -&gt; &quot;${minutes}min&quot;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package fr.uptrash.fuckupplanning.ui.calendar&#10;&#10;import fr.uptrash.fuckupplanning.R&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.WindowInsets&#10;import androidx.compose.foundation.layout.fillMaxHeight&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.CalendarViewDay&#10;import androidx.compose.material.icons.filled.CalendarViewMonth&#10;import androidx.compose.material.icons.filled.CalendarViewWeek&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.FilterList&#10;import androidx.compose.material.icons.filled.Group&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material.icons.filled.Refresh&#10;import androidx.compose.material.icons.filled.School&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.ModalBottomSheet&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SegmentedButton&#10;import androidx.compose.material3.SegmentedButtonDefaults&#10;import androidx.compose.material3.SingleChoiceSegmentedButtonRow&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.material3.rememberModalBottomSheetState&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import fr.uptrash.fuckupplanning.data.model.Event&#10;import kotlinx.datetime.DateTimeUnit&#10;import kotlinx.datetime.DayOfWeek&#10;import kotlinx.datetime.LocalDate&#10;import kotlinx.datetime.LocalDateTime&#10;import kotlinx.datetime.isoDayNumber&#10;import kotlinx.datetime.minus&#10;import kotlinx.datetime.number&#10;import kotlinx.datetime.plus&#10;import kotlinx.datetime.toLocalDateTime&#10;import kotlin.time.Clock&#10;import kotlin.time.ExperimentalTime&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CalendarScreen(&#10;    modifier: Modifier = Modifier,&#10;    viewModel: CalendarViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;&#10;    Scaffold(&#10;        modifier = modifier,&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(stringResource(R.string.app_name), fontWeight = FontWeight.Bold) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;                ),&#10;                actions = {&#10;                    IconButton(onClick = { viewModel.showSettings() }) {&#10;                        Icon(Icons.Default.Settings, contentDescription = stringResource(R.string.settings))&#10;                    }&#10;                    IconButton(onClick = { viewModel.loadEvents() }) {&#10;                        Icon(Icons.Default.Refresh, contentDescription = stringResource(R.string.refresh))&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(top = paddingValues.calculateTopPadding())&#10;        ) {&#10;            CalendarHeader(&#10;                viewMode = uiState.viewMode,&#10;                selectedDate = uiState.selectedDate,&#10;                onViewModeChange = { viewModel.switchViewMode(it) },&#10;                onPreviousClick = { viewModel.navigatePrevious() },&#10;                onNextClick = { viewModel.navigateNext() }&#10;            )&#10;&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        CircularProgressIndicator(&#10;                            modifier = Modifier.size(48.dp),&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;                }&#10;&#10;                uiState.error != null -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                            Text(&#10;                                text = stringResource(R.string.error_format, uiState.error ?: &quot;&quot;),&#10;                                color = MaterialTheme.colorScheme.error,&#10;                                style = MaterialTheme.typography.bodyLarge&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Button(&#10;                                onClick = { viewModel.loadEvents() },&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = MaterialTheme.colorScheme.error&#10;                                )&#10;                            ) {&#10;                                Text(stringResource(R.string.retry))&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    when (uiState.viewMode) {&#10;                        CalendarViewMode.DAY -&gt; DayView(&#10;                            selectedDate = uiState.selectedDate,&#10;                            events = uiState.events,&#10;                            onEventClick = { viewModel.selectEvent(it) },&#10;                            paddingValues = paddingValues&#10;                        )&#10;&#10;                        CalendarViewMode.WEEK -&gt; WeekView(&#10;                            selectedDate = uiState.selectedDate,&#10;                            events = uiState.events,&#10;                            onEventClick = { viewModel.selectEvent(it) },&#10;                            paddingValues = paddingValues&#10;                        )&#10;&#10;                        CalendarViewMode.MONTH -&gt; MonthView(&#10;                            selectedDate = uiState.selectedDate,&#10;                            events = uiState.events,&#10;                            onDateClick = { viewModel.selectDayForCourseList(it) },&#10;                            onEventClick = { viewModel.selectEvent(it) },&#10;                            paddingValues = paddingValues&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Event Detail Modal&#10;        uiState.selectedEvent?.let { event -&gt;&#10;            ModalBottomSheet(&#10;                onDismissRequest = { viewModel.dismissEventDetail() },&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                contentWindowInsets = { WindowInsets(0.dp, 0.dp, 0.dp, 0.dp) },&#10;                sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = false)&#10;            ) {&#10;                EventDetailView(&#10;                    event = event,&#10;                    onDismiss = { viewModel.dismissEventDetail() }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Day Course List Modal&#10;        uiState.selectedDayForCourseList?.let { selectedDate -&gt;&#10;            val dayEvents = uiState.events.filter { it.startDateTime.date == selectedDate }&#10;                .sortedBy { it.startDateTime }&#10;            ModalBottomSheet(&#10;                onDismissRequest = { viewModel.dismissDayCourseList() },&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                contentWindowInsets = { WindowInsets(0.dp, 0.dp, 0.dp, 0.dp) },&#10;                sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = false)&#10;            ) {&#10;                DayCourseListView(&#10;                    date = selectedDate,&#10;                    events = dayEvents,&#10;                    onEventClick = { event -&gt;&#10;                        viewModel.dismissDayCourseList()&#10;                        viewModel.selectEvent(event)&#10;                    },&#10;                    onDismiss = { viewModel.dismissDayCourseList() }&#10;                )&#10;            }&#10;        }&#10;&#10;        // Settings Modal&#10;        if (uiState.showSettings) {&#10;            ModalBottomSheet(&#10;                onDismissRequest = { viewModel.dismissSettings() },&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                contentWindowInsets = { WindowInsets(0.dp, 0.dp, 0.dp, 0.dp) },&#10;                sheetState = rememberModalBottomSheetState(skipPartiallyExpanded = false)&#10;            ) {&#10;                SettingsView(&#10;                    selectedTPGroup = uiState.selectedTPGroup,&#10;                    onTPGroupChange = { viewModel.selectTPGroup(it) },&#10;                    onDismiss = { viewModel.dismissSettings() }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CalendarHeader(&#10;    viewMode: CalendarViewMode,&#10;    selectedDate: LocalDate,&#10;    onViewModeChange: (CalendarViewMode) -&gt; Unit,&#10;    onPreviousClick: () -&gt; Unit,&#10;    onNextClick: () -&gt; Unit&#10;) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        color = MaterialTheme.colorScheme.surface&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // View mode selector&#10;            SingleChoiceSegmentedButtonRow(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                SegmentedButton(&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 0, count = 3),&#10;                    onClick = { onViewModeChange(CalendarViewMode.DAY) },&#10;                    selected = viewMode == CalendarViewMode.DAY,&#10;                    icon = {&#10;                        Icon(&#10;                            Icons.Default.CalendarViewDay,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                ) {&#10;                    Text(stringResource(R.string.day))&#10;                }&#10;                SegmentedButton(&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 1, count = 3),&#10;                    onClick = { onViewModeChange(CalendarViewMode.WEEK) },&#10;                    selected = viewMode == CalendarViewMode.WEEK,&#10;                    icon = {&#10;                        Icon(&#10;                            Icons.Default.CalendarViewWeek,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                ) {&#10;                    Text(stringResource(R.string.week))&#10;                }&#10;                SegmentedButton(&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 2, count = 3),&#10;                    onClick = { onViewModeChange(CalendarViewMode.MONTH) },&#10;                    selected = viewMode == CalendarViewMode.MONTH,&#10;                    icon = {&#10;                        Icon(&#10;                            Icons.Default.CalendarViewMonth,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                ) {&#10;                    Text(stringResource(R.string.month))&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Date navigation&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(onClick = onPreviousClick) {&#10;                    Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = stringResource(R.string.previous))&#10;                }&#10;&#10;                Text(&#10;                    text = formatDateRange(selectedDate, viewMode),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Medium,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                IconButton(onClick = onNextClick) {&#10;                    Icon(Icons.AutoMirrored.Filled.ArrowForward, contentDescription = stringResource(R.string.next))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DayView(&#10;    selectedDate: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    onEventClick: (Event) -&gt; Unit,&#10;    paddingValues: PaddingValues&#10;) {&#10;    val dayEvents = events.filter { it.startDateTime.date == selectedDate }&#10;        .sortedBy { it.startDateTime }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(&#10;            start = 16.dp,&#10;            end = 16.dp,&#10;            top = 16.dp,&#10;            bottom = paddingValues.calculateBottomPadding() + 16.dp&#10;        ),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        if (dayEvents.isEmpty()) {&#10;            item {&#10;                Box(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.no_events_for_day),&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;        } else {&#10;            // Add time summary card&#10;            item {&#10;                DayTimeSummary(events = dayEvents)&#10;            }&#10;&#10;            items(dayEvents) { event -&gt;&#10;                EnhancedEventCard(&#10;                    event = event,&#10;                    onClick = { onEventClick(event) }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DayTimeSummary(modifier: Modifier = Modifier, events: List&lt;Event&gt;) {&#10;    if (events.isEmpty()) return&#10;&#10;    val sortedEvents = events.sortedBy { it.startDateTime }&#10;    val firstEvent = sortedEvents.first()&#10;    val lastEvent = sortedEvents.last()&#10;&#10;    // Calculate total pause time&#10;    var totalPauseMinutes = 0&#10;    for (i in 0 until sortedEvents.size - 1) {&#10;        val currentEventEnd = sortedEvents[i].endDateTime&#10;        val nextEventStart = sortedEvents[i + 1].startDateTime&#10;&#10;        val currentEndMinutes = currentEventEnd.hour * 60 + currentEventEnd.minute&#10;        val nextStartMinutes = nextEventStart.hour * 60 + nextEventStart.minute&#10;&#10;        if (nextStartMinutes &gt; currentEndMinutes) {&#10;            totalPauseMinutes += nextStartMinutes - currentEndMinutes&#10;        }&#10;    }&#10;&#10;    // Calculate total working time&#10;    val totalWorkingMinutes = events.sumOf { event -&gt;&#10;        val startMinutes = event.startDateTime.hour * 60 + event.startDateTime.minute&#10;        val endMinutes = event.endDateTime.hour * 60 + event.endDateTime.minute&#10;        endMinutes - startMinutes&#10;    }&#10;&#10;    Card(&#10;        modifier = modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.7f)&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically,&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.DateRange,&#10;                    contentDescription = stringResource(R.string.day_summary_desc),&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Text(&#10;                    text = stringResource(R.string.day_summary),&#10;                    style = MaterialTheme.typography.titleLarge,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                )&#10;            }&#10;&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                // Start Time&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.start),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = formatTime(firstEvent.startDateTime),&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;&#10;                // End Time&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.end),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = formatTime(lastEvent.endDateTime),&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;&#10;                // Total Events&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.events),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = events.size.toString(),&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Time breakdown row&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                // Working Time&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.work_time),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = formatDuration(totalWorkingMinutes),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.secondary&#10;                    )&#10;                }&#10;&#10;                // Pause Time&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.weight(1f)&#10;                ) {&#10;                    Text(&#10;                        text = stringResource(R.string.pause_time),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)&#10;                    )&#10;                    Text(&#10;                        text = if (totalPauseMinutes &gt; 0) formatDuration(totalPauseMinutes) else stringResource(R.string.none),&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = if (totalPauseMinutes &gt; 0) MaterialTheme.colorScheme.tertiary else MaterialTheme.colorScheme.onPrimaryContainer.copy(&#10;                            alpha = 0.5f&#10;                        )&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WeekView(&#10;    selectedDate: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    onEventClick: (Event) -&gt; Unit,&#10;    paddingValues: PaddingValues&#10;) {&#10;    val startOfWeek = selectedDate.minus(selectedDate.dayOfWeek.isoDayNumber - 1, DateTimeUnit.DAY)&#10;    // Only show Monday to Friday (5 days instead of 7)&#10;    val weekDays = (0..4).map { startOfWeek.plus(it, DateTimeUnit.DAY) }&#10;&#10;    val weekEvents = events.filter { event -&gt;&#10;        weekDays.any { day -&gt; event.startDateTime.date == day }&#10;    }.groupBy { it.startDateTime.date }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(&#10;            start = 16.dp,&#10;            end = 16.dp,&#10;            top = 16.dp,&#10;            bottom = paddingValues.calculateBottomPadding() + 16.dp&#10;        ),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(weekDays) { day -&gt;&#10;            WeekDayCard(&#10;                date = day,&#10;                events = weekEvents[day] ?: emptyList(),&#10;                isSelected = day == selectedDate,&#10;                onEventClick = onEventClick&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalTime::class)&#10;@Composable&#10;fun MonthView(&#10;    selectedDate: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    onDateClick: (LocalDate) -&gt; Unit,&#10;    onEventClick: (Event) -&gt; Unit,&#10;    paddingValues: PaddingValues&#10;) {&#10;    val firstDayOfMonth = LocalDate(selectedDate.year, selectedDate.month, 1)&#10;&#10;    // Calculate the first day to show (start of week containing first day of month)&#10;    val startDay =&#10;        firstDayOfMonth.minus(firstDayOfMonth.dayOfWeek.isoDayNumber - 1, DateTimeUnit.DAY)&#10;&#10;    // Calculate all days to show, but only include weekdays (Monday-Friday)&#10;    val allDays = (0..41).map { startDay.plus(it, DateTimeUnit.DAY) }&#10;    val daysToShow = allDays.filter { date -&gt;&#10;        date.dayOfWeek != DayOfWeek.SATURDAY &amp;&amp; date.dayOfWeek != DayOfWeek.SUNDAY&#10;    }&#10;&#10;    val monthEvents = events.filter { event -&gt;&#10;        daysToShow.any { day -&gt; event.startDateTime.date == day }&#10;    }.groupBy { it.startDateTime.date }&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        // Enhanced month header with only weekdays&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(horizontal = 16.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer&#10;            ),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                listOf(&#10;                    DayOfWeek.MONDAY,&#10;                    DayOfWeek.TUESDAY,&#10;                    DayOfWeek.WEDNESDAY,&#10;                    DayOfWeek.THURSDAY,&#10;                    DayOfWeek.FRIDAY&#10;                ).forEach { dow -&gt;&#10;                    Text(&#10;                        text = getDayOfWeekDisplayName(dow, full = false),&#10;                        modifier = Modifier.weight(1f),&#10;                        textAlign = TextAlign.Center,&#10;                        style = MaterialTheme.typography.labelLarge,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Calendar grid with only weekdays (5 columns)&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(horizontal = 16.dp, vertical = 8.dp),&#10;            verticalArrangement = Arrangement.spacedBy(6.dp),&#10;            contentPadding = PaddingValues(bottom = paddingValues.calculateBottomPadding() + 16.dp)&#10;        ) {&#10;            // Group weekdays into weeks (5 days per row)&#10;            val weekdayChunks = daysToShow.chunked(5)&#10;            items(weekdayChunks) { week -&gt;&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(6.dp)&#10;                ) {&#10;                    week.forEach { date -&gt;&#10;                        EnhancedMonthDayCell(&#10;                            date = date,&#10;                            isCurrentMonth = date.month == selectedDate.month,&#10;                            isSelected = date == selectedDate,&#10;                            isToday = date == Clock.System.now()&#10;                                .toLocalDateTime(kotlinx.datetime.TimeZone.currentSystemDefault()).date,&#10;                            events = monthEvents[date] ?: emptyList(),&#10;                            onDateClick = onDateClick,&#10;                            onEventClick = onEventClick,&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                    }&#10;                    // Fill remaining space if week has less than 5 days&#10;                    repeat(5 - week.size) {&#10;                        Spacer(modifier = Modifier.weight(1f))&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EnhancedMonthDayCell(&#10;    date: LocalDate,&#10;    isCurrentMonth: Boolean,&#10;    isSelected: Boolean,&#10;    isToday: Boolean,&#10;    events: List&lt;Event&gt;,&#10;    onDateClick: (LocalDate) -&gt; Unit,&#10;    onEventClick: (Event) -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    val backgroundColor = when {&#10;        isSelected -&gt; MaterialTheme.colorScheme.primary&#10;        !isCurrentMonth -&gt; MaterialTheme.colorScheme.surfaceVariant&#10;        isToday -&gt; MaterialTheme.colorScheme.secondaryContainer&#10;        else -&gt; MaterialTheme.colorScheme.surface&#10;    }&#10;&#10;    val contentColor = when {&#10;        isSelected -&gt; MaterialTheme.colorScheme.onPrimary&#10;        !isCurrentMonth -&gt; MaterialTheme.colorScheme.onSurfaceVariant&#10;        isToday -&gt; MaterialTheme.colorScheme.onSecondaryContainer&#10;        else -&gt; MaterialTheme.colorScheme.onSurface&#10;    }&#10;&#10;    // Calculate time information for the day&#10;    val sortedEvents = events.sortedBy { it.startDateTime }&#10;    val firstEvent = sortedEvents.firstOrNull()&#10;    val lastEvent = sortedEvents.lastOrNull()&#10;&#10;    // Calculate total working hours for the day&#10;    val totalWorkingMinutes = events.sumOf { event -&gt;&#10;        val startMinutes = event.startDateTime.hour * 60 + event.startDateTime.minute&#10;        val endMinutes = event.endDateTime.hour * 60 + event.endDateTime.minute&#10;        endMinutes - startMinutes&#10;    }&#10;    val totalHours = totalWorkingMinutes / 60f&#10;&#10;    // Calculate outline properties based on total hours&#10;    // Max expected hours per day is 8, so we scale from 0 to 8 hours&#10;    val normalizedHours = (totalHours / 8f).coerceIn(0f, 1f)&#10;    val outlineOpacity = (normalizedHours * 0.8f + 0.2f).coerceIn(0.2f, 1f) // Min 0.2, max 1.0&#10;    val outlineWidth = (normalizedHours * 2f + 0.2f).dp // Min 0.2dp, max 2.2dp&#10;&#10;    val outlineColor = when {&#10;        isSelected -&gt; MaterialTheme.colorScheme.onPrimary&#10;        !isCurrentMonth -&gt; MaterialTheme.colorScheme.outline.copy(alpha = outlineOpacity * 0.5f)&#10;        totalHours &gt; 0 -&gt; MaterialTheme.colorScheme.primary.copy(alpha = outlineOpacity)&#10;        else -&gt; MaterialTheme.colorScheme.outline.copy(alpha = 0.3f)&#10;    }&#10;&#10;    // Calculate total pause time&#10;    var totalPauseMinutes = 0&#10;    if (sortedEvents.size &gt; 1) {&#10;        for (i in 0 until sortedEvents.size - 1) {&#10;            val currentEventEnd = sortedEvents[i].endDateTime&#10;            val nextEventStart = sortedEvents[i + 1].startDateTime&#10;&#10;            val currentEndMinutes = currentEventEnd.hour * 60 + currentEventEnd.minute&#10;            val nextStartMinutes = nextEventStart.hour * 60 + nextEventStart.minute&#10;&#10;            if (nextStartMinutes &gt; currentEndMinutes) {&#10;                totalPauseMinutes += nextStartMinutes - currentEndMinutes&#10;            }&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = modifier&#10;            .fillMaxWidth()&#10;            .fillMaxHeight()&#10;            .clip(RoundedCornerShape(8.dp))&#10;            .background(backgroundColor)&#10;            .border(&#10;                width = if (events.isNotEmpty()) outlineWidth else 1.dp,&#10;                color = outlineColor,&#10;                shape = RoundedCornerShape(8.dp)&#10;            )&#10;            .clickable { onDateClick(date) }&#10;            .padding(8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = date.day.toString(),&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            color = contentColor&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        if (events.isNotEmpty()) {&#10;            // Show time information instead of course names&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(2.dp)&#10;            ) {&#10;                // Start time&#10;                firstEvent?.let { event -&gt;&#10;                    Text(&#10;                        text = formatTime(event.startDateTime),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = contentColor&#10;                    )&#10;                }&#10;&#10;                // End time&#10;                lastEvent?.let { event -&gt;&#10;                    Text(&#10;                        text = formatTime(event.endDateTime),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = contentColor&#10;                    )&#10;                }&#10;&#10;                // Pause time (only if there are multiple events and pauses)&#10;                if (totalPauseMinutes &gt; 0) {&#10;                    Text(&#10;                        text = stringResource(R.string.pause_short, formatDuration(totalPauseMinutes)),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = contentColor.copy(alpha = 0.8f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WeekDayCard(&#10;    date: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    isSelected: Boolean,&#10;    onEventClick: (Event) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isSelected)&#10;                MaterialTheme.colorScheme.primaryContainer&#10;            else&#10;                MaterialTheme.colorScheme.surfaceVariant&#10;        ),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = getDayOfWeekDisplayName(date.dayOfWeek, full = false),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = if (isSelected)&#10;                            MaterialTheme.colorScheme.onPrimaryContainer&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = date.day.toString(),&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (isSelected)&#10;                            MaterialTheme.colorScheme.onPrimaryContainer&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;&#10;                if (events.isNotEmpty()) {&#10;                    Surface(&#10;                        shape = CircleShape,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(24.dp)&#10;                    ) {&#10;                        Box(contentAlignment = Alignment.Center) {&#10;                            Text(&#10;                                text = events.size.toString(),&#10;                                color = MaterialTheme.colorScheme.onPrimary,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            if (events.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                events.take(3).forEach { event -&gt;&#10;                    CompactEventItem(event = event, onClick = { onEventClick(event) })&#10;                    if (event != events.last() &amp;&amp; events.indexOf(event) &lt; 2) {&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                    }&#10;                }&#10;                if (events.size &gt; 3) {&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = stringResource(R.string.more_format, events.size - 3),&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CompactEventItem(event: Event, onClick: () -&gt; Unit) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(8.dp)&#10;                .background(&#10;                    MaterialTheme.colorScheme.primary,&#10;                    CircleShape&#10;                )&#10;        )&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = event.summary,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                fontWeight = FontWeight.Medium,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            Text(&#10;                text = &quot;${formatTime(event.startDateTime)} - ${formatTime(event.endDateTime)}&quot;,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EnhancedEventCard(event: Event, onClick: () -&gt; Unit) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable(onClick = onClick)&#10;            .border(&#10;                width = 1.dp,&#10;                color = MaterialTheme.colorScheme.outline,&#10;                shape = RoundedCornerShape(20.dp)&#10;            ),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surface,&#10;        ),&#10;        shape = RoundedCornerShape(20.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            // Header with course type badge and title&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = event.summary,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis&#10;                    )&#10;                }&#10;&#10;                if (!event.courseType.isNullOrBlank()) {&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Surface(&#10;                        color = when (event.courseType) {&#10;                            &quot;CM&quot; -&gt; MaterialTheme.colorScheme.primaryContainer&#10;                            &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.secondaryContainer&#10;                            &quot;TD&quot; -&gt; MaterialTheme.colorScheme.tertiaryContainer&#10;                            else -&gt; MaterialTheme.colorScheme.primaryContainer&#10;                        },&#10;                        shape = RoundedCornerShape(12.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = event.courseType,&#10;                            style = MaterialTheme.typography.labelLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = when (event.courseType) {&#10;                                &quot;CM&quot; -&gt; MaterialTheme.colorScheme.onPrimaryContainer&#10;                                &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.onSecondaryContainer&#10;                                &quot;TD&quot; -&gt; MaterialTheme.colorScheme.onTertiaryContainer&#10;                                else -&gt; MaterialTheme.colorScheme.onPrimaryContainer&#10;                            },&#10;                            modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Time information with improved styling&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                    shape = CircleShape,&#10;                    modifier = Modifier.size(40.dp)&#10;                ) {&#10;                    Box(contentAlignment = Alignment.Center) {&#10;                        Icon(&#10;                            Icons.Default.DateRange,&#10;                            contentDescription = stringResource(R.string.time_desc),&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(20.dp)&#10;                        )&#10;                    }&#10;                }&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Column {&#10;                    Text(&#10;                        text = &quot;${formatTime(event.startDateTime)} - ${formatTime(event.endDateTime)}&quot;,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.SemiBold,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                    // Calculate duration in minutes&#10;                    val startMinutes = event.startDateTime.hour * 60 + event.startDateTime.minute&#10;                    val endMinutes = event.endDateTime.hour * 60 + event.endDateTime.minute&#10;                    val durationMinutes = endMinutes - startMinutes&#10;                    val hours = durationMinutes / 60&#10;                    val minutes = durationMinutes % 60&#10;                    val durationText = when {&#10;                        hours &gt; 0 &amp;&amp; minutes &gt; 0 -&gt; &quot;${hours}h ${minutes}min&quot;&#10;                        hours &gt; 0 -&gt; &quot;${hours}h&quot;&#10;                        else -&gt; &quot;${minutes}min&quot;&#10;                    }&#10;                    Text(&#10;                        text = durationText,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Location information&#10;            if (!event.location.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Surface(&#10;                        color = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.3f),&#10;                        shape = CircleShape,&#10;                        modifier = Modifier.size(40.dp)&#10;                    ) {&#10;                        Box(contentAlignment = Alignment.Center) {&#10;                            Icon(&#10;                                Icons.Default.LocationOn,&#10;                                contentDescription = stringResource(R.string.location_desc),&#10;                                tint = MaterialTheme.colorScheme.secondary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    Text(&#10;                        text = event.location,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Instructor information&#10;            if (!event.instructor.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Surface(&#10;                        color = MaterialTheme.colorScheme.tertiaryContainer.copy(alpha = 0.3f),&#10;                        shape = CircleShape,&#10;                        modifier = Modifier.size(40.dp)&#10;                    ) {&#10;                        Box(contentAlignment = Alignment.Center) {&#10;                            Icon(&#10;                                Icons.Default.Person,&#10;                                contentDescription = stringResource(R.string.instructor_desc),&#10;                                tint = MaterialTheme.colorScheme.tertiary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    Text(&#10;                        text = event.instructor,&#10;                        style = MaterialTheme.typography.bodyLarge,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Groups information&#10;            if (event.groups.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Surface(&#10;                        color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                        shape = CircleShape,&#10;                        modifier = Modifier.size(40.dp)&#10;                    ) {&#10;                        Box(contentAlignment = Alignment.Center) {&#10;                            Icon(&#10;                                Icons.Default.Group,&#10;                                contentDescription = stringResource(R.string.groups_desc),&#10;                                tint = MaterialTheme.colorScheme.primary,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                        }&#10;                    }&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    Column {&#10;                        Text(&#10;                            text = stringResource(R.string.groups),&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Row(&#10;                            horizontalArrangement = Arrangement.spacedBy(6.dp)&#10;                        ) {&#10;                            event.groups.take(4).forEach { group -&gt;&#10;                                Surface(&#10;                                    color = MaterialTheme.colorScheme.primaryContainer,&#10;                                    shape = RoundedCornerShape(8.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = group,&#10;                                        style = MaterialTheme.typography.labelSmall,&#10;                                        fontWeight = FontWeight.Medium,&#10;                                        color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                                        modifier = Modifier.padding(&#10;                                            horizontal = 8.dp,&#10;                                            vertical = 4.dp&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;                            if (event.groups.size &gt; 4) {&#10;                                Spacer(modifier = Modifier.height(4.dp))&#10;                                Text(&#10;                                    text = stringResource(R.string.more_format, event.groups.size - 3),&#10;                                    style = MaterialTheme.typography.labelSmall,&#10;                                    color = MaterialTheme.colorScheme.primary,&#10;                                    fontWeight = FontWeight.Medium&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Notes preview&#10;            if (!event.notes.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Surface(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    color = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Column(modifier = Modifier.padding(12.dp)) {&#10;                        Text(&#10;                            text = stringResource(R.string.notes),&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            fontWeight = FontWeight.SemiBold,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Text(&#10;                            text = event.notes,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            maxLines = 2,&#10;                            overflow = TextOverflow.Ellipsis,&#10;                            lineHeight = MaterialTheme.typography.bodyMedium.lineHeight.times(1.2f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Tap to view more indicator&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.End,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Text(&#10;                    text = stringResource(R.string.tap_for_details),&#10;                    style = MaterialTheme.typography.labelSmall,&#10;                    color = MaterialTheme.colorScheme.primary,&#10;                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic&#10;                )&#10;                Spacer(modifier = Modifier.width(4.dp))&#10;                Icon(&#10;                    Icons.AutoMirrored.Filled.ArrowForward,&#10;                    contentDescription = stringResource(R.string.view_details),&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(16.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EventDetailView(&#10;    event: Event,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(0.dp), // Remove padding to use full width&#10;        verticalArrangement = Arrangement.spacedBy(0.dp)&#10;    ) {&#10;        // Header with gradient background&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                ),&#10;                shape = RoundedCornerShape(&#10;                    topStart = 28.dp,&#10;                    topEnd = 28.dp,&#10;                    bottomStart = 0.dp,&#10;                    bottomEnd = 0.dp&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    // Event title and course type&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.Top&#10;                    ) {&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            Text(&#10;                                text = event.summary,&#10;                                style = MaterialTheme.typography.headlineLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                                lineHeight = MaterialTheme.typography.headlineLarge.lineHeight.times(&#10;                                    1.1f&#10;                                )&#10;                            )&#10;                        }&#10;&#10;                        if (!event.courseType.isNullOrBlank()) {&#10;                            Spacer(modifier = Modifier.width(16.dp))&#10;                            Surface(&#10;                                color = when (event.courseType) {&#10;                                    &quot;CM&quot; -&gt; MaterialTheme.colorScheme.primary&#10;                                    &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.secondary&#10;                                    &quot;TD&quot; -&gt; MaterialTheme.colorScheme.tertiary&#10;                                    else -&gt; MaterialTheme.colorScheme.primary&#10;                                },&#10;                                shape = RoundedCornerShape(16.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = event.courseType,&#10;                                    style = MaterialTheme.typography.titleMedium,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = when (event.courseType) {&#10;                                        &quot;CM&quot; -&gt; MaterialTheme.colorScheme.onPrimary&#10;                                        &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.onSecondary&#10;                                        &quot;TD&quot; -&gt; MaterialTheme.colorScheme.onTertiary&#10;                                        else -&gt; MaterialTheme.colorScheme.onPrimary&#10;                                    },&#10;                                    modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Main content area&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface&#10;                ),&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(28.dp)&#10;                ) {&#10;                    // Time &amp; Date Section&#10;                    EnhancedDetailSection(&#10;                        title = stringResource(R.string.schedule),&#10;                        icon = Icons.Default.DateRange,&#10;                        iconColor = MaterialTheme.colorScheme.primary&#10;                    ) {&#10;                        Column(verticalArrangement = Arrangement.spacedBy(12.dp)) {&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween,&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.date),&#10;                                        style = MaterialTheme.typography.labelLarge,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                        fontWeight = FontWeight.Medium&#10;                                    )&#10;                                    Text(&#10;                                        text = formatDate(event.startDateTime.date),&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = MaterialTheme.colorScheme.onSurface&#10;                                    )&#10;                                }&#10;&#10;                                Surface(&#10;                                    color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                                    shape = RoundedCornerShape(12.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = getDayOfWeekDisplayName(&#10;                                            event.startDateTime.date.dayOfWeek,&#10;                                            full = true&#10;                                        ),&#10;                                        style = MaterialTheme.typography.labelLarge,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = MaterialTheme.colorScheme.primary,&#10;                                        modifier = Modifier.padding(&#10;                                            horizontal = 12.dp,&#10;                                            vertical = 6.dp&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            Row(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                horizontalArrangement = Arrangement.SpaceBetween&#10;                            ) {&#10;                                TimeDisplayCard(&#10;                                    label = stringResource(R.string.start),&#10;                                    time = formatTime(event.startDateTime),&#10;                                    modifier = Modifier.weight(1f)&#10;                                )&#10;&#10;                                Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                                TimeDisplayCard(&#10;                                    label = stringResource(R.string.end),&#10;                                    time = formatTime(event.endDateTime),&#10;                                    modifier = Modifier.weight(1f)&#10;                                )&#10;                            }&#10;&#10;                            // Duration&#10;                            val startMinutes =&#10;                                event.startDateTime.hour * 60 + event.startDateTime.minute&#10;                            val endMinutes = event.endDateTime.hour * 60 + event.endDateTime.minute&#10;                            val durationMinutes = endMinutes - startMinutes&#10;&#10;                            Surface(&#10;                                color = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.5f),&#10;                                shape = RoundedCornerShape(16.dp),&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier.padding(16.dp),&#10;                                    verticalAlignment = Alignment.CenterVertically,&#10;                                    horizontalArrangement = Arrangement.Center&#10;                                ) {&#10;                                    Icon(&#10;                                        Icons.Default.DateRange,&#10;                                        contentDescription = null,&#10;                                        tint = MaterialTheme.colorScheme.secondary,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(8.dp))&#10;                                    Text(&#10;                                        text = stringResource(R.string.duration_format, formatDuration(durationMinutes)),&#10;                                        style = MaterialTheme.typography.titleMedium,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = MaterialTheme.colorScheme.secondary&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Location Section&#10;                    if (!event.location.isNullOrBlank()) {&#10;                        EnhancedDetailSection(&#10;                            title = stringResource(R.string.location),&#10;                            icon = Icons.Default.LocationOn,&#10;                            iconColor = MaterialTheme.colorScheme.secondary&#10;                        ) {&#10;                            Surface(&#10;                                color = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f),&#10;                                shape = RoundedCornerShape(16.dp),&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Text(&#10;                                    text = event.location,&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    color = MaterialTheme.colorScheme.onSurface,&#10;                                    modifier = Modifier.padding(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Instructor Section&#10;                    if (!event.instructor.isNullOrBlank()) {&#10;                        EnhancedDetailSection(&#10;                            title = stringResource(R.string.instructor),&#10;                            icon = Icons.Default.Person,&#10;                            iconColor = MaterialTheme.colorScheme.tertiary&#10;                        ) {&#10;                            Surface(&#10;                                color = MaterialTheme.colorScheme.tertiaryContainer.copy(alpha = 0.3f),&#10;                                shape = RoundedCornerShape(16.dp),&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Text(&#10;                                    text = event.instructor,&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    fontWeight = FontWeight.Medium,&#10;                                    color = MaterialTheme.colorScheme.onSurface,&#10;                                    modifier = Modifier.padding(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Groups Section&#10;                    if (event.groups.isNotEmpty()) {&#10;                        EnhancedDetailSection(&#10;                            title = stringResource(R.string.groups),&#10;                            icon = Icons.Default.Group,&#10;                            iconColor = MaterialTheme.colorScheme.primary&#10;                        ) {&#10;                            LazyRow(&#10;                                horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                                contentPadding = PaddingValues(horizontal = 4.dp)&#10;                            ) {&#10;                                items(event.groups) { group -&gt;&#10;                                    Surface(&#10;                                        color = MaterialTheme.colorScheme.primaryContainer,&#10;                                        shape = RoundedCornerShape(20.dp)&#10;                                    ) {&#10;                                        Text(&#10;                                            text = group,&#10;                                            style = MaterialTheme.typography.titleMedium,&#10;                                            fontWeight = FontWeight.SemiBold,&#10;                                            color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                                            modifier = Modifier.padding(&#10;                                                horizontal = 16.dp,&#10;                                                vertical = 8.dp&#10;                                            )&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Notes Section&#10;                    if (!event.notes.isNullOrBlank()) {&#10;                        EnhancedDetailSection(&#10;                            title = stringResource(R.string.notes),&#10;                            icon = Icons.Default.School,&#10;                            iconColor = MaterialTheme.colorScheme.secondary&#10;                        ) {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(&#10;                                        alpha = 0.5f&#10;                                    )&#10;                                ),&#10;                                shape = RoundedCornerShape(16.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = event.notes,&#10;                                    style = MaterialTheme.typography.bodyLarge,&#10;                                    color = MaterialTheme.colorScheme.onSurface,&#10;                                    modifier = Modifier.padding(20.dp),&#10;                                    lineHeight = MaterialTheme.typography.bodyLarge.lineHeight.times(&#10;                                        1.4f&#10;                                    )&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Additional Information Section&#10;                    if (!event.lastUpdated.isNullOrBlank()) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.outline.copy(alpha = 0.1f),&#10;                            shape = RoundedCornerShape(12.dp),&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        ) {&#10;                            Column(&#10;                                modifier = Modifier.padding(16.dp),&#10;                                verticalArrangement = Arrangement.spacedBy(4.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = stringResource(R.string.last_updated),&#10;                                    style = MaterialTheme.typography.labelMedium,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                                Text(&#10;                                    text = event.lastUpdated,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                    fontStyle = androidx.compose.ui.text.font.FontStyle.Italic&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Bottom padding&#10;                    Spacer(modifier = Modifier.height(32.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EnhancedDetailSection(&#10;    title: String,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector,&#10;    iconColor: androidx.compose.ui.graphics.Color,&#10;    content: @Composable () -&gt; Unit&#10;) {&#10;    Column(&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        Row(&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            Surface(&#10;                color = iconColor.copy(alpha = 0.15f),&#10;                shape = CircleShape,&#10;                modifier = Modifier.size(40.dp)&#10;            ) {&#10;                Box(contentAlignment = Alignment.Center) {&#10;                    Icon(&#10;                        imageVector = icon,&#10;                        contentDescription = null,&#10;                        tint = iconColor,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;            Text(&#10;                text = title,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurface&#10;            )&#10;        }&#10;        content()&#10;    }&#10;}&#10;&#10;@Composable&#10;fun TimeDisplayCard(&#10;    label: String,&#10;    time: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Surface(&#10;        color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.5f),&#10;        shape = RoundedCornerShape(16.dp),&#10;        modifier = modifier&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(4.dp)&#10;        ) {&#10;            Text(&#10;                text = label,&#10;                style = MaterialTheme.typography.labelLarge,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                fontWeight = FontWeight.Medium&#10;            )&#10;            Text(&#10;                text = time,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DayCourseListView(&#10;    date: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    onEventClick: (Event) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(0.dp),&#10;        verticalArrangement = Arrangement.spacedBy(0.dp)&#10;    ) {&#10;        // Header&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                ),&#10;                shape = RoundedCornerShape(&#10;                    topStart = 28.dp,&#10;                    topEnd = 28.dp,&#10;                    bottomStart = 0.dp,&#10;                    bottomEnd = 0.dp&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceBetween,&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Column {&#10;                            Text(&#10;                                text = formatDate(date),&#10;                                style = MaterialTheme.typography.headlineLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer,&#10;                            )&#10;                            Text(&#10;                                text = getDayOfWeekDisplayName(date.dayOfWeek, full = true),&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)&#10;                            )&#10;                        }&#10;&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(48.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Text(&#10;                                    text = events.size.toString(),&#10;                                    style = MaterialTheme.typography.headlineMedium,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = MaterialTheme.colorScheme.onPrimary&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Time Summary Section&#10;        if (events.isNotEmpty()) {&#10;            item {&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surface&#10;                    ),&#10;                    shape = RoundedCornerShape(0.dp)&#10;                ) {&#10;                    DayTimeSummary(&#10;                        modifier = Modifier.padding(&#10;                            start = 16.dp,&#10;                            end = 16.dp,&#10;                            top = 16.dp&#10;                        ), events = events&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Course List&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface&#10;                ),&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    if (events.isEmpty()) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(32.dp),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Column(&#10;                                horizontalAlignment = Alignment.CenterHorizontally,&#10;                                verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    Icons.Default.DateRange,&#10;                                    contentDescription = stringResource(R.string.no_events_desc),&#10;                                    tint = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                    modifier = Modifier.size(48.dp)&#10;                                )&#10;                                Text(&#10;                                    text = stringResource(R.string.no_courses_for_day),&#10;                                    style = MaterialTheme.typography.titleLarge,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                    textAlign = TextAlign.Center&#10;                                )&#10;                            }&#10;                        }&#10;                    } else {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Surface(&#10;                                color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                                shape = CircleShape,&#10;                                modifier = Modifier.size(40.dp)&#10;                            ) {&#10;                                Box(contentAlignment = Alignment.Center) {&#10;                                    Icon(&#10;                                        Icons.Default.School,&#10;                                        contentDescription = stringResource(R.string.courses_icon_desc),&#10;                                        tint = MaterialTheme.colorScheme.primary,&#10;                                        modifier = Modifier.size(20.dp)&#10;                                    )&#10;                                }&#10;                            }&#10;                            Text(&#10;                                text = stringResource(R.string.courses),&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;&#10;                        events.forEach { event -&gt;&#10;                            DayCourseItem(&#10;                                event = event,&#10;                                onClick = { onEventClick(event) }&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Bottom padding&#10;                    Spacer(modifier = Modifier.height(32.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DayCourseItem(&#10;    event: Event,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceTint.copy(alpha = 0.1f)&#10;        ),&#10;        shape = RoundedCornerShape(20.dp),&#10;        onClick = onClick&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(24.dp)&#10;        ) {&#10;            // Header section with title and course type badge&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.Top&#10;            ) {&#10;                Column(modifier = Modifier.weight(1f)) {&#10;                    Text(&#10;                        text = event.summary,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        maxLines = 2,&#10;                        overflow = TextOverflow.Ellipsis,&#10;                        lineHeight = MaterialTheme.typography.headlineSmall.lineHeight.times(1.1f)&#10;                    )&#10;                }&#10;&#10;                if (!event.courseType.isNullOrBlank()) {&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    Surface(&#10;                        color = when (event.courseType) {&#10;                            &quot;CM&quot; -&gt; MaterialTheme.colorScheme.primary&#10;                            &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.secondary&#10;                            &quot;TD&quot; -&gt; MaterialTheme.colorScheme.tertiary&#10;                            else -&gt; MaterialTheme.colorScheme.primary&#10;                        },&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = event.courseType,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = when (event.courseType) {&#10;                                &quot;CM&quot; -&gt; MaterialTheme.colorScheme.onPrimary&#10;                                &quot;TDB&quot; -&gt; MaterialTheme.colorScheme.onSecondary&#10;                                &quot;TD&quot; -&gt; MaterialTheme.colorScheme.onTertiary&#10;                                else -&gt; MaterialTheme.colorScheme.onPrimary&#10;                            },&#10;                            modifier = Modifier.padding(horizontal = 16.dp, vertical = 8.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Enhanced time section with visual divider&#10;            Surface(&#10;                color = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f),&#10;                shape = RoundedCornerShape(topStart = 16.dp, topEnd = 16.dp),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(top = 8.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.padding(20.dp),&#10;                    horizontalArrangement = Arrangement.SpaceEvenly,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    // Start time with icon&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.DateRange,&#10;                                    contentDescription = stringResource(R.string.start_time_desc),&#10;                                    tint = MaterialTheme.colorScheme.primary,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Text(&#10;                            text = stringResource(R.string.start),&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = formatTime(event.startDateTime),&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.primary&#10;                        )&#10;                    }&#10;&#10;                    // Visual divider&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .width(2.dp)&#10;                            .height(60.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.outline.copy(alpha = 0.3f),&#10;                                RoundedCornerShape(1.dp)&#10;                            )&#10;                    )&#10;&#10;                    // End time with icon&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.secondary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.DateRange,&#10;                                    contentDescription = stringResource(R.string.end_time_desc),&#10;                                    tint = MaterialTheme.colorScheme.secondary,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Text(&#10;                            text = stringResource(R.string.end),&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                        Text(&#10;                            text = formatTime(event.endDateTime),&#10;                            style = MaterialTheme.typography.titleLarge,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = MaterialTheme.colorScheme.secondary&#10;                        )&#10;                    }&#10;&#10;                    // Visual divider&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .width(2.dp)&#10;                            .height(60.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.outline.copy(alpha = 0.3f),&#10;                                RoundedCornerShape(1.dp)&#10;                            )&#10;                    )&#10;&#10;                    // Duration with icon&#10;                    Column(&#10;                        horizontalAlignment = Alignment.CenterHorizontally,&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp),&#10;                        modifier = Modifier.weight(1f)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.tertiary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(32.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.DateRange,&#10;                                    contentDescription = stringResource(R.string.duration_desc),&#10;                                    tint = MaterialTheme.colorScheme.tertiary,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Text(&#10;                            text = stringResource(R.string.duration_format, formatDuration(durationMinutes)),&#10;                            style = MaterialTheme.typography.labelMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Location section with enhanced styling&#10;            if (!event.location.isNullOrBlank()) {&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.5f),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.secondary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(40.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.LocationOn,&#10;                                    contentDescription = &quot;Location&quot;,&#10;                                    tint = MaterialTheme.colorScheme.secondary,&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Column {&#10;                            Text(&#10;                                text = stringResource(R.string.location),&#10;                                style = MaterialTheme.typography.labelMedium,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = event.location,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.SemiBold,&#10;                                color = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Instructor section if available&#10;            if (!event.instructor.isNullOrBlank()) {&#10;                Surface(&#10;                    color = MaterialTheme.colorScheme.tertiaryContainer.copy(alpha = 0.3f),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.padding(16.dp),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.tertiary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(40.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.Person,&#10;                                    contentDescription = stringResource(R.string.instructor_desc),&#10;                                    tint = MaterialTheme.colorScheme.tertiary,&#10;                                    modifier = Modifier.size(20.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Column {&#10;                            Text(&#10;                                text = stringResource(R.string.instructor),&#10;                                style = MaterialTheme.typography.labelMedium,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                            Text(&#10;                                text = event.instructor,&#10;                                style = MaterialTheme.typography.titleMedium,&#10;                                fontWeight = FontWeight.SemiBold,&#10;                                color = MaterialTheme.colorScheme.onSurface&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Enhanced call-to-action with better visual emphasis&#10;            Surface(&#10;                color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                shape = RoundedCornerShape(bottomEnd = 16.dp, bottomStart = 16.dp),&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier.padding(16.dp),&#10;                    horizontalArrangement = Arrangement.SpaceBetween,&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(24.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.School,&#10;                                    contentDescription = &quot;Details&quot;,&#10;                                    tint = MaterialTheme.colorScheme.primary,&#10;                                    modifier = Modifier.size(12.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Text(&#10;                            text = stringResource(R.string.tap_to_view_full_details),&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.primary,&#10;                            fontWeight = FontWeight.Medium&#10;                        )&#10;                    }&#10;                    Icon(&#10;                        Icons.AutoMirrored.Filled.ArrowForward,&#10;                        contentDescription = stringResource(R.string.view_details),&#10;                        tint = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                 }&#10;             }&#10;         }&#10;     }&#10; }&#10;&#10;// Settings View&#10;@Composable&#10;fun SettingsView(&#10;    selectedTPGroup: TPGroup,&#10;    onTPGroupChange: (TPGroup) -&gt; Unit,&#10;    onDismiss: () -&gt; Unit&#10;) {&#10;    LazyColumn(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(0.dp),&#10;        verticalArrangement = Arrangement.spacedBy(0.dp)&#10;    ) {&#10;        // Header&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                ),&#10;                shape = RoundedCornerShape(&#10;                    topStart = 28.dp,&#10;                    topEnd = 28.dp,&#10;                    bottomStart = 0.dp,&#10;                    bottomEnd = 0.dp&#10;                )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp)&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Surface(&#10;                            color = MaterialTheme.colorScheme.primary.copy(alpha = 0.2f),&#10;                            shape = CircleShape,&#10;                            modifier = Modifier.size(48.dp)&#10;                        ) {&#10;                            Box(contentAlignment = Alignment.Center) {&#10;                                Icon(&#10;                                    Icons.Default.Settings,&#10;                                    contentDescription = stringResource(R.string.settings_desc),&#10;                                    tint = MaterialTheme.colorScheme.primary,&#10;                                    modifier = Modifier.size(24.dp)&#10;                                )&#10;                            }&#10;                        }&#10;                        Column {&#10;                            Text(&#10;                                text = stringResource(R.string.settings),&#10;                                style = MaterialTheme.typography.headlineLarge,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                            Text(&#10;                                text = stringResource(R.string.configure_your_calendar_preferences),&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.8f)&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Main content area&#10;        item {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = MaterialTheme.colorScheme.surface&#10;                ),&#10;                shape = RoundedCornerShape(0.dp)&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier.padding(24.dp),&#10;                    verticalArrangement = Arrangement.spacedBy(24.dp)&#10;                ) {&#10;                    // TP Group Filter Section&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondaryContainer.copy(alpha = 0.3f)&#10;                        ),&#10;                        shape = RoundedCornerShape(16.dp)&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(20.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                            ) {&#10;                                Surface(&#10;                                    color = MaterialTheme.colorScheme.secondary.copy(alpha = 0.2f),&#10;                                    shape = CircleShape,&#10;                                    modifier = Modifier.size(40.dp)&#10;                                ) {&#10;                                    Box(contentAlignment = Alignment.Center) {&#10;                                        Icon(&#10;                                            Icons.Default.FilterList,&#10;                                            contentDescription = &quot;Filter&quot;,&#10;                                            tint = MaterialTheme.colorScheme.secondary,&#10;                                            modifier = Modifier.size(20.dp)&#10;                                        )&#10;                                    }&#10;                                }&#10;                                Column {&#10;                                    Text(&#10;                                        text = stringResource(R.string.tp_group_filter),&#10;                                        style = MaterialTheme.typography.titleLarge,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                                    )&#10;                                    Text(&#10;                                        text = stringResource(R.string.choose_which_tp_group_events_to_display),&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onSecondaryContainer.copy(&#10;                                            alpha = 0.8f&#10;                                        )&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // TP Group Selection&#10;                            SingleChoiceSegmentedButtonRow(&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                listOf(&#10;                                    TPGroup.ALL,&#10;                                    TPGroup.TP1,&#10;                                    TPGroup.TP2,&#10;                                    TPGroup.TP3,&#10;                                    TPGroup.TP4&#10;                                ).forEachIndexed { index, tpGroup -&gt;&#10;                                    SegmentedButton(&#10;                                        shape = SegmentedButtonDefaults.itemShape(&#10;                                            index = index,&#10;                                            count = 5&#10;                                        ),&#10;                                        onClick = { onTPGroupChange(tpGroup) },&#10;                                        selected = selectedTPGroup == tpGroup,&#10;                                        colors = SegmentedButtonDefaults.colors(&#10;                                            activeContainerColor = MaterialTheme.colorScheme.secondary,&#10;                                            activeContentColor = MaterialTheme.colorScheme.onSecondary,&#10;                                            inactiveContainerColor = MaterialTheme.colorScheme.surface,&#10;                                            inactiveContentColor = MaterialTheme.colorScheme.onSurface&#10;                                        )&#10;                                    ) {&#10;                                        Text(&#10;                                            text = when (tpGroup) {&#10;                                                TPGroup.ALL -&gt; stringResource(R.string.all_label)&#10;                                                TPGroup.TP1 -&gt; stringResource(R.string.tp1_label)&#10;                                                TPGroup.TP2 -&gt; stringResource(R.string.tp2_label)&#10;                                                TPGroup.TP3 -&gt; stringResource(R.string.tp3_label)&#10;                                                TPGroup.TP4 -&gt; stringResource(R.string.tp4_label)&#10;                                            },&#10;                                            style = MaterialTheme.typography.labelMedium,&#10;                                            fontWeight = if (selectedTPGroup == tpGroup) FontWeight.Bold else FontWeight.Medium&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;&#10;                            // Current selection info&#10;                            Surface(&#10;                                color = MaterialTheme.colorScheme.primary.copy(alpha = 0.1f),&#10;                                shape = RoundedCornerShape(12.dp),&#10;                                modifier = Modifier.fillMaxWidth()&#10;                            ) {&#10;                                Column(&#10;                                    modifier = Modifier.padding(16.dp),&#10;                                    verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = stringResource(R.string.current_filter),&#10;                                        style = MaterialTheme.typography.labelMedium,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = MaterialTheme.colorScheme.primary&#10;                                    )&#10;                                    when (selectedTPGroup) {&#10;                                        TPGroup.ALL -&gt; {&#10;                                            Text(&#10;                                                text = stringResource(R.string.showing_all_events_regardless_of_tp_group),&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = MaterialTheme.colorScheme.onSurface&#10;                                            )&#10;                                        }&#10;&#10;                                        TPGroup.TP1 -&gt; {&#10;                                            Text(&#10;                                                text = stringResource(R.string.showing_tp1_tda_cm_courses_and_general_events),&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = MaterialTheme.colorScheme.onSurface&#10;                                            )&#10;                                        }&#10;&#10;                                        TPGroup.TP2 -&gt; {&#10;                                            Text(&#10;                                                text = stringResource(R.string.showing_tp2_tda_cm_courses_and_general_events),&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = MaterialTheme.colorScheme.onSurface&#10;                                            )&#10;                                        }&#10;&#10;                                        TPGroup.TP3 -&gt; {&#10;                                            Text(&#10;                                                text = stringResource(R.string.showing_tp3_tdb_cm_courses_and_general_events),&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = MaterialTheme.colorScheme.onSurface&#10;                                            )&#10;                                        }&#10;&#10;                                        TPGroup.TP4 -&gt; {&#10;                                            Text(&#10;                                                text = stringResource(R.string.showing_tp4_tdb_cm_courses_and_general_events),&#10;                                                style = MaterialTheme.typography.bodyMedium,&#10;                                                color = MaterialTheme.colorScheme.onSurface&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    // Future settings can be added here&#10;                    Text(&#10;                        text = stringResource(R.string.more_settings_will_be_available_in_future_updates),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    // Bottom padding&#10;                    Spacer(modifier = Modifier.height(32.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper functions&#10;private fun formatDateRange(date: LocalDate, viewMode: CalendarViewMode): String {&#10;    return when (viewMode) {&#10;        CalendarViewMode.DAY -&gt; formatDate(date)&#10;        CalendarViewMode.WEEK -&gt; {&#10;            val startOfWeek = date.minus(date.dayOfWeek.isoDayNumber - 1, DateTimeUnit.DAY)&#10;            val endOfWeek = startOfWeek.plus(6, DateTimeUnit.DAY)&#10;            &quot;${formatDate(startOfWeek)} - ${formatDate(endOfWeek)}&quot;&#10;        }&#10;&#10;        CalendarViewMode.MONTH -&gt; {&#10;            val month = date.month.number.toString().padStart(2, '0')&#10;            val year = date.year&#10;            &quot;$month/$year&quot;&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatDate(date: LocalDate): String {&#10;    return &quot;${date.day.toString().padStart(2, '0')}/&quot; +&#10;            &quot;${date.month.number.toString().padStart(2, '0')}/&quot; +&#10;            &quot;${date.year}&quot;&#10;}&#10;&#10;private fun formatTime(dateTime: LocalDateTime): String {&#10;    return &quot;${dateTime.hour.toString().padStart(2, '0')}:&quot; +&#10;            dateTime.minute.toString().padStart(2, '0')&#10;}&#10;&#10;@Composable&#10;private fun getDayOfWeekDisplayName(dayOfWeek: DayOfWeek, full: Boolean): String {&#10;    return when (dayOfWeek) {&#10;        DayOfWeek.MONDAY -&gt; if (full) stringResource(R.string.monday) else stringResource(R.string.mon)&#10;        DayOfWeek.TUESDAY -&gt; if (full) stringResource(R.string.tuesday) else stringResource(R.string.tue)&#10;        DayOfWeek.WEDNESDAY -&gt; if (full) stringResource(R.string.wednesday) else stringResource(R.string.wed)&#10;        DayOfWeek.THURSDAY -&gt; if (full) stringResource(R.string.thursday) else stringResource(R.string.thu)&#10;        DayOfWeek.FRIDAY -&gt; if (full) stringResource(R.string.friday) else stringResource(R.string.fri)&#10;        DayOfWeek.SATURDAY -&gt; if (full) stringResource(R.string.saturday) else stringResource(R.string.sat)&#10;        DayOfWeek.SUNDAY -&gt; if (full) stringResource(R.string.sunday) else stringResource(R.string.sun)&#10;    }&#10;}&#10;&#10;private fun formatDuration(totalMinutes: Int): String {&#10;    val hours = totalMinutes / 60&#10;    val minutes = totalMinutes % 60&#10;    return when {&#10;        hours &gt; 0 &amp;&amp; minutes &gt; 0 -&gt; &quot;${hours}h ${minutes}min&quot;&#10;        hours &gt; 0 -&gt; &quot;${hours}h&quot;&#10;        else -&gt; &quot;${minutes}min&quot;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/values/strings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/values/strings.xml" />
              <option name="originalContent" value="&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;PlanItBetter&lt;/string&gt;&#10;&lt;/resources&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;resources&gt;&#10;    &lt;string name=&quot;app_name&quot;&gt;PlanItBetter&lt;/string&gt;&#10;    &lt;string name=&quot;settings&quot;&gt;Settings&lt;/string&gt;&#10;    &lt;string name=&quot;refresh&quot;&gt;Refresh&lt;/string&gt;&#10;    &lt;string name=&quot;retry&quot;&gt;Retry&lt;/string&gt;&#10;    &lt;string name=&quot;day&quot;&gt;Day&lt;/string&gt;&#10;    &lt;string name=&quot;week&quot;&gt;Week&lt;/string&gt;&#10;    &lt;string name=&quot;month&quot;&gt;Month&lt;/string&gt;&#10;    &lt;string name=&quot;previous&quot;&gt;Previous&lt;/string&gt;&#10;    &lt;string name=&quot;next&quot;&gt;Next&lt;/string&gt;&#10;    &lt;string name=&quot;no_events_for_day&quot;&gt;No events for this day&lt;/string&gt;&#10;    &lt;string name=&quot;error_format&quot;&gt;Error: %1$s&lt;/string&gt;&#10;&#10;    &lt;!-- Day summary --&gt;&#10;    &lt;string name=&quot;day_summary&quot;&gt;Day Summary&lt;/string&gt;&#10;    &lt;string name=&quot;start&quot;&gt;Start&lt;/string&gt;&#10;    &lt;string name=&quot;end&quot;&gt;End&lt;/string&gt;&#10;    &lt;string name=&quot;events&quot;&gt;Events&lt;/string&gt;&#10;    &lt;string name=&quot;work_time&quot;&gt;Work Time&lt;/string&gt;&#10;    &lt;string name=&quot;pause_time&quot;&gt;Pause Time&lt;/string&gt;&#10;    &lt;string name=&quot;none&quot;&gt;None&lt;/string&gt;&#10;    &lt;string name=&quot;pause_prefix&quot;&gt;P:%1$s&lt;/string&gt;&#10;&#10;    &lt;!-- Weekday short names --&gt;&#10;    &lt;string name=&quot;mon&quot;&gt;Mon&lt;/string&gt;&#10;    &lt;string name=&quot;tue&quot;&gt;Tue&lt;/string&gt;&#10;    &lt;string name=&quot;wed&quot;&gt;Wed&lt;/string&gt;&#10;    &lt;string name=&quot;thu&quot;&gt;Thu&lt;/string&gt;&#10;    &lt;string name=&quot;fri&quot;&gt;Fri&lt;/string&gt;&#10;    &lt;string name=&quot;sat&quot;&gt;Sat&lt;/string&gt;&#10;    &lt;string name=&quot;sun&quot;&gt;Sun&lt;/string&gt;&#10;&#10;    &lt;!-- Full weekday names --&gt;&#10;    &lt;string name=&quot;monday&quot;&gt;Monday&lt;/string&gt;&#10;    &lt;string name=&quot;tuesday&quot;&gt;Tuesday&lt;/string&gt;&#10;    &lt;string name=&quot;wednesday&quot;&gt;Wednesday&lt;/string&gt;&#10;    &lt;string name=&quot;thursday&quot;&gt;Thursday&lt;/string&gt;&#10;    &lt;string name=&quot;friday&quot;&gt;Friday&lt;/string&gt;&#10;    &lt;string name=&quot;saturday&quot;&gt;Saturday&lt;/string&gt;&#10;    &lt;string name=&quot;sunday&quot;&gt;Sunday&lt;/string&gt;&#10;&#10;    &lt;!-- Month view --&gt;&#10;    &lt;string name=&quot;no_courses_for_day&quot;&gt;No courses for this day&lt;/string&gt;&#10;    &lt;string name=&quot;courses&quot;&gt;Courses&lt;/string&gt;&#10;    &lt;string name=&quot;courses_icon_desc&quot;&gt;Courses&lt;/string&gt;&#10;&#10;    &lt;!-- General labels and descriptions --&gt;&#10;    &lt;string name=&quot;time&quot;&gt;Time&lt;/string&gt;&#10;    &lt;string name=&quot;location&quot;&gt;Location&lt;/string&gt;&#10;    &lt;string name=&quot;instructor&quot;&gt;Instructor&lt;/string&gt;&#10;    &lt;string name=&quot;groups&quot;&gt;Groups&lt;/string&gt;&#10;    &lt;string name=&quot;notes&quot;&gt;Notes&lt;/string&gt;&#10;    &lt;string name=&quot;tap_for_details&quot;&gt;Tap for details&lt;/string&gt;&#10;    &lt;string name=&quot;view_details&quot;&gt;View details&lt;/string&gt;&#10;&#10;    &lt;!-- Duration strings --&gt;&#10;    &lt;string name=&quot;duration_label&quot;&gt;Duration&lt;/string&gt;&#10;    &lt;string name=&quot;duration_format&quot;&gt;Duration: %1$s&lt;/string&gt;&#10;    &lt;string name=&quot;duration&quot;&gt;Duration&lt;/string&gt;&#10;&#10;    &lt;!-- Misc --&gt;&#10;    &lt;string name=&quot;more_format&quot;&gt;+%1$d more&lt;/string&gt;&#10;    &lt;string name=&quot;pause_short&quot;&gt;P:%1$s&lt;/string&gt;&#10;&#10;    &lt;!-- Settings --&gt;&#10;    &lt;string name=&quot;configure_your_calendar_preferences&quot;&gt;Configure your calendar preferences&lt;/string&gt;&#10;    &lt;string name=&quot;tp_group_filter&quot;&gt;TP Group Filter&lt;/string&gt;&#10;    &lt;string name=&quot;choose_which_tp_group_events_to_display&quot;&gt;Choose which TP group events to display&lt;/string&gt;&#10;    &lt;string name=&quot;all_label&quot;&gt;All&lt;/string&gt;&#10;    &lt;string name=&quot;tp1_label&quot;&gt;TP1&lt;/string&gt;&#10;    &lt;string name=&quot;tp2_label&quot;&gt;TP2&lt;/string&gt;&#10;    &lt;string name=&quot;tp3_label&quot;&gt;TP3&lt;/string&gt;&#10;    &lt;string name=&quot;tp4_label&quot;&gt;TP4&lt;/string&gt;&#10;    &lt;string name=&quot;current_filter&quot;&gt;Current filter&lt;/string&gt;&#10;    &lt;string name=&quot;showing_all_events_regardless_of_tp_group&quot;&gt;Showing all events regardless of TP group&lt;/string&gt;&#10;    &lt;string name=&quot;showing_tp1_tda_cm_courses_and_general_events&quot;&gt;Showing TP1 (TDA, CM courses and general events)&lt;/string&gt;&#10;    &lt;string name=&quot;showing_tp2_tda_cm_courses_and_general_events&quot;&gt;Showing TP2 (TDA, CM courses and general events)&lt;/string&gt;&#10;    &lt;string name=&quot;showing_tp3_tdb_cm_courses_and_general_events&quot;&gt;Showing TP3 (TDB, CM courses and general events)&lt;/string&gt;&#10;    &lt;string name=&quot;showing_tp4_tdb_cm_courses_and_general_events&quot;&gt;Showing TP4 (TDB, CM courses and general events)&lt;/string&gt;&#10;    &lt;string name=&quot;more_settings_will_be_available_in_future_updates&quot;&gt;More settings will be available in future updates&lt;/string&gt;&#10;&#10;    &lt;string name=&quot;tap_to_view_full_details&quot;&gt;Tap to view full details&lt;/string&gt;&#10;    &lt;string name=&quot;last_updated&quot;&gt;Last updated&lt;/string&gt;&#10;&#10;    &lt;!-- Additional strings --&gt;&#10;    &lt;string name=&quot;schedule&quot;&gt;Schedule&lt;/string&gt;&#10;    &lt;string name=&quot;date&quot;&gt;Date&lt;/string&gt;&#10;&#10;    &lt;!-- Content descriptions --&gt;&#10;    &lt;string name=&quot;day_summary_desc&quot;&gt;Day summary&lt;/string&gt;&#10;    &lt;string name=&quot;time_desc&quot;&gt;Time&lt;/string&gt;&#10;    &lt;string name=&quot;location_desc&quot;&gt;Location&lt;/string&gt;&#10;    &lt;string name=&quot;instructor_desc&quot;&gt;Instructor&lt;/string&gt;&#10;    &lt;string name=&quot;groups_desc&quot;&gt;Groups&lt;/string&gt;&#10;    &lt;string name=&quot;no_events_desc&quot;&gt;No events&lt;/string&gt;&#10;    &lt;string name=&quot;start_time_desc&quot;&gt;Start time&lt;/string&gt;&#10;    &lt;string name=&quot;end_time_desc&quot;&gt;End time&lt;/string&gt;&#10;    &lt;string name=&quot;duration_desc&quot;&gt;Duration&lt;/string&gt;&#10;    &lt;string name=&quot;settings_desc&quot;&gt;Settings&lt;/string&gt;&#10;&lt;/resources&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>