<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/fr/uptrash/fuckupplanning/ui/calendar/CalendarScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/fr/uptrash/fuckupplanning/ui/calendar/CalendarScreen.kt" />
              <option name="originalContent" value="package fr.uptrash.fuckupplanning.ui.calendar&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.CalendarViewDay&#10;import androidx.compose.material.icons.filled.CalendarViewWeek&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Refresh&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.SegmentedButton&#10;import androidx.compose.material3.SegmentedButtonDefaults&#10;import androidx.compose.material3.SingleChoiceSegmentedButtonRow&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import fr.uptrash.fuckupplanning.data.model.Event&#10;import kotlinx.datetime.DateTimeUnit&#10;import kotlinx.datetime.DayOfWeek&#10;import kotlinx.datetime.LocalDate&#10;import kotlinx.datetime.LocalDateTime&#10;import kotlinx.datetime.isoDayNumber&#10;import kotlinx.datetime.minus&#10;import kotlinx.datetime.number&#10;import kotlinx.datetime.plus&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CalendarScreen(&#10;    viewModel: CalendarViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        TopAppBar(&#10;            title = { Text(&quot;FuckUpPlanning&quot;, fontWeight = FontWeight.Bold) },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;            ),&#10;            actions = {&#10;                IconButton(onClick = { viewModel.loadEvents() }) {&#10;                    Icon(Icons.Default.Refresh, contentDescription = &quot;Refresh&quot;)&#10;                }&#10;            }&#10;        )&#10;&#10;        CalendarHeader(&#10;            viewMode = uiState.viewMode,&#10;            selectedDate = uiState.selectedDate,&#10;            onViewModeChange = { viewModel.switchViewMode(it) },&#10;            onPreviousClick = { viewModel.navigatePrevious() },&#10;            onNextClick = { viewModel.navigateNext() }&#10;        )&#10;&#10;        when {&#10;            uiState.isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(48.dp),&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;&#10;            uiState.error != null -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        Text(&#10;                            text = &quot;Error: ${uiState.error}&quot;,&#10;                            color = MaterialTheme.colorScheme.error,&#10;                            style = MaterialTheme.typography.bodyLarge&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Button(&#10;                            onClick = { viewModel.loadEvents() },&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = MaterialTheme.colorScheme.error&#10;                            )&#10;                        ) {&#10;                            Text(&quot;Retry&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                when (uiState.viewMode) {&#10;                    CalendarViewMode.DAY -&gt; DayView(&#10;                        selectedDate = uiState.selectedDate,&#10;                        events = uiState.events&#10;                    )&#10;&#10;                    CalendarViewMode.WEEK -&gt; WeekView(&#10;                        selectedDate = uiState.selectedDate,&#10;                        events = uiState.events&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CalendarHeader(&#10;    viewMode: CalendarViewMode,&#10;    selectedDate: LocalDate,&#10;    onViewModeChange: (CalendarViewMode) -&gt; Unit,&#10;    onPreviousClick: () -&gt; Unit,&#10;    onNextClick: () -&gt; Unit&#10;) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        color = MaterialTheme.colorScheme.surface&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // View mode selector&#10;            SingleChoiceSegmentedButtonRow(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                SegmentedButton(&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 0, count = 2),&#10;                    onClick = { onViewModeChange(CalendarViewMode.DAY) },&#10;                    selected = viewMode == CalendarViewMode.DAY,&#10;                    icon = {&#10;                        Icon(&#10;                            Icons.Default.CalendarViewDay,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                ) {&#10;                    Text(&quot;Day&quot;)&#10;                }&#10;                SegmentedButton(&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 1, count = 2),&#10;                    onClick = { onViewModeChange(CalendarViewMode.WEEK) },&#10;                    selected = viewMode == CalendarViewMode.WEEK,&#10;                    icon = {&#10;                        Icon(&#10;                            Icons.Default.CalendarViewWeek,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                ) {&#10;                    Text(&quot;Week&quot;)&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Date navigation&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(&#10;                    onClick = onPreviousClick,&#10;                    modifier = Modifier&#10;                        .clip(CircleShape)&#10;                        .background(MaterialTheme.colorScheme.primaryContainer)&#10;                ) {&#10;                    Icon(&#10;                        Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Previous&quot;,&#10;                        tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = formatDateRange(selectedDate, viewMode),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                IconButton(&#10;                    onClick = onNextClick,&#10;                    modifier = Modifier&#10;                        .clip(CircleShape)&#10;                        .background(MaterialTheme.colorScheme.primaryContainer)&#10;                ) {&#10;                    Icon(&#10;                        Icons.AutoMirrored.Filled.ArrowForward,&#10;                        contentDescription = &quot;Next&quot;,&#10;                        tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DayView(&#10;    selectedDate: LocalDate,&#10;    events: List&lt;Event&gt;&#10;) {&#10;    val dayEvents = events.filter { event -&gt;&#10;        event.startDateTime.date == selectedDate&#10;    }.sortedBy { it.startDateTime }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = getDayOfWeekDisplayName(selectedDate.dayOfWeek, full = true),&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary&#10;        )&#10;&#10;        Text(&#10;            text = formatDate(selectedDate),&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (dayEvents.isEmpty()) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;No events for this day&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(dayEvents) { event -&gt;&#10;                    EnhancedEventCard(event = event)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WeekView(&#10;    selectedDate: LocalDate,&#10;    events: List&lt;Event&gt;&#10;) {&#10;    val startOfWeek = selectedDate.minus(selectedDate.dayOfWeek.isoDayNumber - 1, DateTimeUnit.DAY)&#10;    val weekDays = (0..6).map { startOfWeek.plus(it, DateTimeUnit.DAY) }&#10;&#10;    val weekEvents = events.filter { event -&gt;&#10;        weekDays.any { day -&gt; event.startDateTime.date == day }&#10;    }.groupBy { it.startDateTime.date }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(weekDays) { day -&gt;&#10;            WeekDayCard(&#10;                date = day,&#10;                events = weekEvents[day] ?: emptyList(),&#10;                isSelected = day == selectedDate&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WeekDayCard(&#10;    date: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    isSelected: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = if (isSelected) 8.dp else 2.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isSelected)&#10;                MaterialTheme.colorScheme.primaryContainer&#10;            else&#10;                MaterialTheme.colorScheme.surface&#10;        ),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = getDayOfWeekDisplayName(date.dayOfWeek, full = false),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = if (isSelected)&#10;                            MaterialTheme.colorScheme.onPrimaryContainer&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = date.day.toString(),&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (isSelected)&#10;                            MaterialTheme.colorScheme.onPrimaryContainer&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;&#10;                if (events.isNotEmpty()) {&#10;                    Surface(&#10;                        shape = CircleShape,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(24.dp)&#10;                    ) {&#10;                        Box(contentAlignment = Alignment.Center) {&#10;                            Text(&#10;                                text = events.size.toString(),&#10;                                color = MaterialTheme.colorScheme.onPrimary,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            if (events.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                events.take(3).forEach { event -&gt;&#10;                    CompactEventItem(event = event)&#10;                    if (event != events.last() &amp;&amp; events.indexOf(event) &lt; 2) {&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                    }&#10;                }&#10;                if (events.size &gt; 3) {&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;+${events.size - 3} more&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CompactEventItem(event: Event) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(8.dp)&#10;                .background(&#10;                    MaterialTheme.colorScheme.primary,&#10;                    CircleShape&#10;                )&#10;        )&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = event.summary,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                fontWeight = FontWeight.Medium,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            Text(&#10;                text = &quot;${formatTime(event.startDateTime)} - ${formatTime(event.endDateTime)}&quot;,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EnhancedEventCard(event: Event) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Text(&#10;                text = event.summary,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                maxLines = 3,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.DateRange,&#10;                    contentDescription = &quot;Date&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                Text(&#10;                    text = &quot;${formatTime(event.startDateTime)} - ${formatTime(event.endDateTime)}&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            if (!event.location.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Text(&#10;                        text = event.location,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            if (!event.description.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surface&#10;                    ),&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = event.description.replace(&quot;\\n&quot;, &quot;\n&quot;),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        modifier = Modifier.padding(12.dp),&#10;                        lineHeight = MaterialTheme.typography.bodyMedium.lineHeight.times(1.2f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper functions&#10;private fun formatDateRange(date: LocalDate, viewMode: CalendarViewMode): String {&#10;    return when (viewMode) {&#10;        CalendarViewMode.DAY -&gt; formatDate(date)&#10;        CalendarViewMode.WEEK -&gt; {&#10;            val startOfWeek = date.minus(date.dayOfWeek.isoDayNumber - 1, DateTimeUnit.DAY)&#10;            val endOfWeek = startOfWeek.plus(6, DateTimeUnit.DAY)&#10;            &quot;${formatDate(startOfWeek)} - ${formatDate(endOfWeek)}&quot;&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatDate(date: LocalDate): String {&#10;    return &quot;${date.day.toString().padStart(2, '0')}/&quot; +&#10;            &quot;${date.month.number.toString().padStart(2, '0')}/&quot; +&#10;            &quot;${date.year}&quot;&#10;}&#10;&#10;private fun formatTime(dateTime: LocalDateTime): String {&#10;    return &quot;${dateTime.hour.toString().padStart(2, '0')}:&quot; +&#10;            dateTime.minute.toString().padStart(2, '0')&#10;}&#10;&#10;private fun getDayOfWeekDisplayName(dayOfWeek: DayOfWeek, full: Boolean): String {&#10;    return when (dayOfWeek) {&#10;        DayOfWeek.MONDAY -&gt; if (full) &quot;Monday&quot; else &quot;Mon&quot;&#10;        DayOfWeek.TUESDAY -&gt; if (full) &quot;Tuesday&quot; else &quot;Tue&quot;&#10;        DayOfWeek.WEDNESDAY -&gt; if (full) &quot;Wednesday&quot; else &quot;Wed&quot;&#10;        DayOfWeek.THURSDAY -&gt; if (full) &quot;Thursday&quot; else &quot;Thu&quot;&#10;        DayOfWeek.FRIDAY -&gt; if (full) &quot;Friday&quot; else &quot;Fri&quot;&#10;        DayOfWeek.SATURDAY -&gt; if (full) &quot;Saturday&quot; else &quot;Sat&quot;&#10;        DayOfWeek.SUNDAY -&gt; if (full) &quot;Sunday&quot; else &quot;Sun&quot;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package fr.uptrash.fuckupplanning.ui.calendar&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.PaddingValues&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.automirrored.filled.ArrowForward&#10;import androidx.compose.material.icons.filled.CalendarViewDay&#10;import androidx.compose.material.icons.filled.CalendarViewWeek&#10;import androidx.compose.material.icons.filled.DateRange&#10;import androidx.compose.material.icons.filled.LocationOn&#10;import androidx.compose.material.icons.filled.Refresh&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.SegmentedButton&#10;import androidx.compose.material3.SegmentedButtonDefaults&#10;import androidx.compose.material3.SingleChoiceSegmentedButtonRow&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.style.TextOverflow&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import fr.uptrash.fuckupplanning.data.model.Event&#10;import kotlinx.datetime.DateTimeUnit&#10;import kotlinx.datetime.DayOfWeek&#10;import kotlinx.datetime.LocalDate&#10;import kotlinx.datetime.LocalDateTime&#10;import kotlinx.datetime.isoDayNumber&#10;import kotlinx.datetime.minus&#10;import kotlinx.datetime.number&#10;import kotlinx.datetime.plus&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CalendarScreen(&#10;    viewModel: CalendarViewModel = hiltViewModel()&#10;) {&#10;    val uiState by viewModel.uiState.collectAsState()&#10;&#10;    Column(modifier = Modifier.fillMaxSize()) {&#10;        TopAppBar(&#10;            title = { Text(&quot;FuckUpPlanning&quot;, fontWeight = FontWeight.Bold) },&#10;            colors = TopAppBarDefaults.topAppBarColors(&#10;                containerColor = MaterialTheme.colorScheme.primaryContainer,&#10;                titleContentColor = MaterialTheme.colorScheme.onPrimaryContainer&#10;            ),&#10;            actions = {&#10;                IconButton(onClick = { viewModel.loadEvents() }) {&#10;                    Icon(Icons.Default.Refresh, contentDescription = &quot;Refresh&quot;)&#10;                }&#10;            }&#10;        )&#10;&#10;        CalendarHeader(&#10;            viewMode = uiState.viewMode,&#10;            selectedDate = uiState.selectedDate,&#10;            onViewModeChange = { viewModel.switchViewMode(it) },&#10;            onPreviousClick = { viewModel.navigatePrevious() },&#10;            onNextClick = { viewModel.navigateNext() }&#10;        )&#10;&#10;        when {&#10;            uiState.isLoading -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(48.dp),&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;&#10;            uiState.error != null -&gt; {&#10;                Box(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        Text(&#10;                            text = &quot;Error: ${uiState.error}&quot;,&#10;                            color = MaterialTheme.colorScheme.error,&#10;                            style = MaterialTheme.typography.bodyLarge&#10;                        )&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                        Button(&#10;                            onClick = { viewModel.loadEvents() },&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = MaterialTheme.colorScheme.error&#10;                            )&#10;                        ) {&#10;                            Text(&quot;Retry&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            else -&gt; {&#10;                when (uiState.viewMode) {&#10;                    CalendarViewMode.DAY -&gt; DayView(&#10;                        selectedDate = uiState.selectedDate,&#10;                        events = uiState.events&#10;                    )&#10;&#10;                    CalendarViewMode.WEEK -&gt; WeekView(&#10;                        selectedDate = uiState.selectedDate,&#10;                        events = uiState.events&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun CalendarHeader(&#10;    viewMode: CalendarViewMode,&#10;    selectedDate: LocalDate,&#10;    onViewModeChange: (CalendarViewMode) -&gt; Unit,&#10;    onPreviousClick: () -&gt; Unit,&#10;    onNextClick: () -&gt; Unit&#10;) {&#10;    Surface(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        color = MaterialTheme.colorScheme.surface&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // View mode selector&#10;            SingleChoiceSegmentedButtonRow(&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                SegmentedButton(&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 0, count = 2),&#10;                    onClick = { onViewModeChange(CalendarViewMode.DAY) },&#10;                    selected = viewMode == CalendarViewMode.DAY,&#10;                    icon = {&#10;                        Icon(&#10;                            Icons.Default.CalendarViewDay,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                ) {&#10;                    Text(&quot;Day&quot;)&#10;                }&#10;                SegmentedButton(&#10;                    shape = SegmentedButtonDefaults.itemShape(index = 1, count = 2),&#10;                    onClick = { onViewModeChange(CalendarViewMode.WEEK) },&#10;                    selected = viewMode == CalendarViewMode.WEEK,&#10;                    icon = {&#10;                        Icon(&#10;                            Icons.Default.CalendarViewWeek,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(18.dp)&#10;                        )&#10;                    }&#10;                ) {&#10;                    Text(&quot;Week&quot;)&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Date navigation&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                IconButton(&#10;                    onClick = onPreviousClick,&#10;                    modifier = Modifier&#10;                        .clip(CircleShape)&#10;                        .background(MaterialTheme.colorScheme.primaryContainer)&#10;                ) {&#10;                    Icon(&#10;                        Icons.AutoMirrored.Filled.ArrowBack,&#10;                        contentDescription = &quot;Previous&quot;,&#10;                        tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = formatDateRange(selectedDate, viewMode),&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    fontWeight = FontWeight.Bold,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;&#10;                IconButton(&#10;                    onClick = onNextClick,&#10;                    modifier = Modifier&#10;                        .clip(CircleShape)&#10;                        .background(MaterialTheme.colorScheme.primaryContainer)&#10;                ) {&#10;                    Icon(&#10;                        Icons.AutoMirrored.Filled.ArrowForward,&#10;                        contentDescription = &quot;Next&quot;,&#10;                        tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DayView(&#10;    selectedDate: LocalDate,&#10;    events: List&lt;Event&gt;&#10;) {&#10;    val dayEvents = events.filter { event -&gt;&#10;        event.startDateTime.date == selectedDate&#10;    }.sortedBy { it.startDateTime }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = getDayOfWeekDisplayName(selectedDate.dayOfWeek, full = true),&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            color = MaterialTheme.colorScheme.primary&#10;        )&#10;&#10;        Text(&#10;            text = formatDate(selectedDate),&#10;            style = MaterialTheme.typography.bodyLarge,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        if (dayEvents.isEmpty()) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;No events for this day&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        } else {&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(dayEvents) { event -&gt;&#10;                    EnhancedEventCard(event = event)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WeekView(&#10;    selectedDate: LocalDate,&#10;    events: List&lt;Event&gt;&#10;) {&#10;    val startOfWeek = selectedDate.minus(selectedDate.dayOfWeek.isoDayNumber - 1, DateTimeUnit.DAY)&#10;    val weekDays = (0..6).map { startOfWeek.plus(it, DateTimeUnit.DAY) }&#10;&#10;    val weekEvents = events.filter { event -&gt;&#10;        weekDays.any { day -&gt; event.startDateTime.date == day }&#10;    }.groupBy { it.startDateTime.date }&#10;&#10;    LazyColumn(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentPadding = PaddingValues(16.dp),&#10;        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;    ) {&#10;        items(weekDays) { day -&gt;&#10;            WeekDayCard(&#10;                date = day,&#10;                events = weekEvents[day] ?: emptyList(),&#10;                isSelected = day == selectedDate&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun WeekDayCard(&#10;    date: LocalDate,&#10;    events: List&lt;Event&gt;,&#10;    isSelected: Boolean&#10;) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = if (isSelected) 8.dp else 2.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (isSelected)&#10;                MaterialTheme.colorScheme.primaryContainer&#10;            else&#10;                MaterialTheme.colorScheme.surface&#10;        ),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column {&#10;                    Text(&#10;                        text = getDayOfWeekDisplayName(date.dayOfWeek, full = false),&#10;                        style = MaterialTheme.typography.labelMedium,&#10;                        color = if (isSelected)&#10;                            MaterialTheme.colorScheme.onPrimaryContainer&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                    Text(&#10;                        text = date.day.toString(),&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (isSelected)&#10;                            MaterialTheme.colorScheme.onPrimaryContainer&#10;                        else&#10;                            MaterialTheme.colorScheme.onSurface&#10;                    )&#10;                }&#10;&#10;                if (events.isNotEmpty()) {&#10;                    Surface(&#10;                        shape = CircleShape,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(24.dp)&#10;                    ) {&#10;                        Box(contentAlignment = Alignment.Center) {&#10;                            Text(&#10;                                text = events.size.toString(),&#10;                                color = MaterialTheme.colorScheme.onPrimary,&#10;                                style = MaterialTheme.typography.labelSmall,&#10;                                fontWeight = FontWeight.Bold&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            if (events.isNotEmpty()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                events.take(3).forEach { event -&gt;&#10;                    CompactEventItem(event = event)&#10;                    if (event != events.last() &amp;&amp; events.indexOf(event) &lt; 2) {&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                    }&#10;                }&#10;                if (events.size &gt; 3) {&#10;                    Spacer(modifier = Modifier.height(4.dp))&#10;                    Text(&#10;                        text = &quot;+${events.size - 3} more&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CompactEventItem(event: Event) {&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(8.dp)&#10;                .background(&#10;                    MaterialTheme.colorScheme.primary,&#10;                    CircleShape&#10;                )&#10;        )&#10;        Spacer(modifier = Modifier.width(8.dp))&#10;        Column(modifier = Modifier.weight(1f)) {&#10;            Text(&#10;                text = event.summary,&#10;                style = MaterialTheme.typography.bodySmall,&#10;                fontWeight = FontWeight.Medium,&#10;                maxLines = 1,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;            Text(&#10;                text = &quot;${formatTime(event.startDateTime)} - ${formatTime(event.endDateTime)}&quot;,&#10;                style = MaterialTheme.typography.labelSmall,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun EnhancedEventCard(event: Event) {&#10;    Card(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = MaterialTheme.colorScheme.surfaceVariant&#10;        ),&#10;        shape = RoundedCornerShape(16.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(20.dp)&#10;        ) {&#10;            Text(&#10;                text = event.summary,&#10;                style = MaterialTheme.typography.headlineSmall,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                maxLines = 3,&#10;                overflow = TextOverflow.Ellipsis&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            Row(&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    Icons.Default.DateRange,&#10;                    contentDescription = &quot;Date&quot;,&#10;                    tint = MaterialTheme.colorScheme.primary,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(12.dp))&#10;                Text(&#10;                    text = &quot;${formatTime(event.startDateTime)} - ${formatTime(event.endDateTime)}&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge,&#10;                    fontWeight = FontWeight.Medium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;&#10;            if (!event.location.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.LocationOn,&#10;                        contentDescription = &quot;Location&quot;,&#10;                        tint = MaterialTheme.colorScheme.primary,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Text(&#10;                        text = event.location,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            if (!event.description.isNullOrBlank()) {&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;                Card(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.surface&#10;                    ),&#10;                    shape = RoundedCornerShape(8.dp)&#10;                ) {&#10;                    Text(&#10;                        text = event.description.replace(&quot;\\n&quot;, &quot;\n&quot;),&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurface,&#10;                        modifier = Modifier.padding(12.dp),&#10;                        lineHeight = MaterialTheme.typography.bodyMedium.lineHeight.times(1.2f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Helper functions&#10;private fun formatDateRange(date: LocalDate, viewMode: CalendarViewMode): String {&#10;    return when (viewMode) {&#10;        CalendarViewMode.DAY -&gt; formatDate(date)&#10;        CalendarViewMode.WEEK -&gt; {&#10;            val startOfWeek = date.minus(date.dayOfWeek.isoDayNumber - 1, DateTimeUnit.DAY)&#10;            val endOfWeek = startOfWeek.plus(6, DateTimeUnit.DAY)&#10;            &quot;${formatDate(startOfWeek)} - ${formatDate(endOfWeek)}&quot;&#10;        }&#10;    }&#10;}&#10;&#10;private fun formatDate(date: LocalDate): String {&#10;    return &quot;${date.day.toString().padStart(2, '0')}/&quot; +&#10;            &quot;${date.month.number.toString().padStart(2, '0')}/&quot; +&#10;            &quot;${date.year}&quot;&#10;}&#10;&#10;private fun formatTime(dateTime: LocalDateTime): String {&#10;    return &quot;${dateTime.hour.toString().padStart(2, '0')}:&quot; +&#10;            dateTime.minute.toString().padStart(2, '0')&#10;}&#10;&#10;private fun getDayOfWeekDisplayName(dayOfWeek: DayOfWeek, full: Boolean): String {&#10;    return when (dayOfWeek) {&#10;        DayOfWeek.MONDAY -&gt; if (full) &quot;Monday&quot; else &quot;Mon&quot;&#10;        DayOfWeek.TUESDAY -&gt; if (full) &quot;Tuesday&quot; else &quot;Tue&quot;&#10;        DayOfWeek.WEDNESDAY -&gt; if (full) &quot;Wednesday&quot; else &quot;Wed&quot;&#10;        DayOfWeek.THURSDAY -&gt; if (full) &quot;Thursday&quot; else &quot;Thu&quot;&#10;        DayOfWeek.FRIDAY -&gt; if (full) &quot;Friday&quot; else &quot;Fri&quot;&#10;        DayOfWeek.SATURDAY -&gt; if (full) &quot;Saturday&quot; else &quot;Sat&quot;&#10;        DayOfWeek.SUNDAY -&gt; if (full) &quot;Sunday&quot; else &quot;Sun&quot;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/fr/uptrash/fuckupplanning/ui/calendar/CalendarViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/fr/uptrash/fuckupplanning/ui/calendar/CalendarViewModel.kt" />
              <option name="originalContent" value="package fr.uptrash.fuckupplanning.ui.calendar&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import fr.uptrash.fuckupplanning.data.model.Event&#10;import fr.uptrash.fuckupplanning.data.repository.CalendarRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.datetime.DateTimeUnit&#10;import kotlinx.datetime.LocalDate&#10;import kotlinx.datetime.TimeZone&#10;import kotlinx.datetime.minus&#10;import kotlinx.datetime.plus&#10;import kotlinx.datetime.toLocalDateTime&#10;import javax.inject.Inject&#10;import kotlin.time.Clock&#10;import kotlin.time.ExperimentalTime&#10;&#10;enum class CalendarViewMode {&#10;    DAY, WEEK&#10;}&#10;&#10;@HiltViewModel&#10;class CalendarViewModel @Inject constructor(&#10;    private val repository: CalendarRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(CalendarUiState())&#10;    val uiState: StateFlow&lt;CalendarUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadEvents()&#10;    }&#10;&#10;    fun loadEvents() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;&#10;            repository.getEvents().fold(&#10;                onSuccess = { events -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        events = events,&#10;                        isLoading = false,&#10;                        error = null&#10;                    )&#10;                },&#10;                onFailure = { exception -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        error = exception.message ?: &quot;Unknown error occurred&quot;&#10;                    )&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    fun switchViewMode(viewMode: CalendarViewMode) {&#10;        _uiState.value = _uiState.value.copy(viewMode = viewMode)&#10;    }&#10;&#10;    fun navigateToDate(date: LocalDate) {&#10;        _uiState.value = _uiState.value.copy(selectedDate = date)&#10;    }&#10;&#10;    fun navigatePrevious() {&#10;        val currentDate = _uiState.value.selectedDate&#10;        val newDate = when (_uiState.value.viewMode) {&#10;            CalendarViewMode.DAY -&gt; currentDate.minus(1, DateTimeUnit.DAY)&#10;            CalendarViewMode.WEEK -&gt; currentDate.minus(7, DateTimeUnit.DAY)&#10;        }&#10;        _uiState.value = _uiState.value.copy(selectedDate = newDate)&#10;    }&#10;&#10;    fun navigateNext() {&#10;        val currentDate = _uiState.value.selectedDate&#10;        val newDate = when (_uiState.value.viewMode) {&#10;            CalendarViewMode.DAY -&gt; currentDate.plus(1, DateTimeUnit.DAY)&#10;            CalendarViewMode.WEEK -&gt; currentDate.plus(7, DateTimeUnit.DAY)&#10;        }&#10;        _uiState.value = _uiState.value.copy(selectedDate = newDate)&#10;    }&#10;}&#10;&#10;data class CalendarUiState @OptIn(ExperimentalTime::class) constructor(&#10;    val events: List&lt;Event&gt; = emptyList(),&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null,&#10;    val viewMode: CalendarViewMode = CalendarViewMode.WEEK,&#10;    val selectedDate: LocalDate = Clock.System.now()&#10;        .toLocalDateTime(TimeZone.currentSystemDefault()).date&#10;)" />
              <option name="updatedContent" value="package fr.uptrash.fuckupplanning.ui.calendar&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import fr.uptrash.fuckupplanning.data.model.Event&#10;import fr.uptrash.fuckupplanning.data.repository.CalendarRepository&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.launch&#10;import kotlinx.datetime.DateTimeUnit&#10;import kotlinx.datetime.LocalDate&#10;import kotlinx.datetime.TimeZone&#10;import kotlinx.datetime.minus&#10;import kotlinx.datetime.plus&#10;import kotlinx.datetime.toLocalDateTime&#10;import javax.inject.Inject&#10;import kotlin.time.Clock&#10;import kotlin.time.ExperimentalTime&#10;&#10;enum class CalendarViewMode {&#10;    DAY, WEEK&#10;}&#10;&#10;@HiltViewModel&#10;class CalendarViewModel @Inject constructor(&#10;    private val repository: CalendarRepository&#10;) : ViewModel() {&#10;&#10;    private val _uiState = MutableStateFlow(CalendarUiState())&#10;    val uiState: StateFlow&lt;CalendarUiState&gt; = _uiState.asStateFlow()&#10;&#10;    init {&#10;        loadEvents()&#10;    }&#10;&#10;    fun loadEvents() {&#10;        viewModelScope.launch {&#10;            _uiState.value = _uiState.value.copy(isLoading = true, error = null)&#10;&#10;            repository.getEvents().fold(&#10;                onSuccess = { events -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        events = events,&#10;                        isLoading = false,&#10;                        error = null&#10;                    )&#10;                },&#10;                onFailure = { exception -&gt;&#10;                    _uiState.value = _uiState.value.copy(&#10;                        isLoading = false,&#10;                        error = exception.message ?: &quot;Unknown error occurred&quot;&#10;                    )&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    fun switchViewMode(viewMode: CalendarViewMode) {&#10;        _uiState.value = _uiState.value.copy(viewMode = viewMode)&#10;    }&#10;&#10;    fun navigateToDate(date: LocalDate) {&#10;        _uiState.value = _uiState.value.copy(selectedDate = date)&#10;    }&#10;&#10;    fun navigatePrevious() {&#10;        val currentDate = _uiState.value.selectedDate&#10;        val newDate = when (_uiState.value.viewMode) {&#10;            CalendarViewMode.DAY -&gt; currentDate.minus(1, DateTimeUnit.DAY)&#10;            CalendarViewMode.WEEK -&gt; currentDate.minus(7, DateTimeUnit.DAY)&#10;        }&#10;        _uiState.value = _uiState.value.copy(selectedDate = newDate)&#10;    }&#10;&#10;    fun navigateNext() {&#10;        val currentDate = _uiState.value.selectedDate&#10;        val newDate = when (_uiState.value.viewMode) {&#10;            CalendarViewMode.DAY -&gt; currentDate.plus(1, DateTimeUnit.DAY)&#10;            CalendarViewMode.WEEK -&gt; currentDate.plus(7, DateTimeUnit.DAY)&#10;        }&#10;        _uiState.value = _uiState.value.copy(selectedDate = newDate)&#10;    }&#10;}&#10;&#10;data class CalendarUiState @OptIn(ExperimentalTime::class) constructor(&#10;    val events: List&lt;Event&gt; = emptyList(),&#10;    val isLoading: Boolean = false,&#10;    val error: String? = null,&#10;    val viewMode: CalendarViewMode = CalendarViewMode.WEEK,&#10;    val selectedDate: LocalDate = Clock.System.now()&#10;        .toLocalDateTime(TimeZone.currentSystemDefault()).date&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>